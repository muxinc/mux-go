/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
)

// Upload struct for Upload
type Upload struct {
	// Unique identifier for the Direct Upload.
	Id *string `json:"id,omitempty"`
	// Max time in seconds for the signed upload URL to be valid. If a successful upload has not occurred before the timeout limit, the direct upload is marked `timed_out`
	Timeout *int32 `json:"timeout,omitempty"`
	Status *string `json:"status,omitempty"`
	NewAssetSettings *Asset `json:"new_asset_settings,omitempty"`
	// Only set once the upload is in the `asset_created` state.
	AssetId *string `json:"asset_id,omitempty"`
	Error *UploadError `json:"error,omitempty"`
	// If the upload URL will be used in a browser, you must specify the origin in order for the signed URL to have the correct CORS headers.
	CorsOrigin *string `json:"cors_origin,omitempty"`
	// The URL to upload the associated source media to.
	Url *string `json:"url,omitempty"`
	// Indicates if this is a test Direct Upload, in which case the Asset that gets created will be a `test` Asset.
	Test *bool `json:"test,omitempty"`
}

// NewUpload instantiates a new Upload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpload() *Upload {
	this := Upload{}
	var timeout int32 = 3600
	this.Timeout = &timeout
	return &this
}

// NewUploadWithDefaults instantiates a new Upload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadWithDefaults() *Upload {
	this := Upload{}
	var timeout int32 = 3600
	this.Timeout = &timeout
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Upload) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upload) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Upload) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Upload) SetId(v string) {
	o.Id = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *Upload) GetTimeout() int32 {
	if o == nil || o.Timeout == nil {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upload) GetTimeoutOk() (*int32, bool) {
	if o == nil || o.Timeout == nil {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *Upload) HasTimeout() bool {
	if o != nil && o.Timeout != nil {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *Upload) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Upload) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upload) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Upload) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Upload) SetStatus(v string) {
	o.Status = &v
}

// GetNewAssetSettings returns the NewAssetSettings field value if set, zero value otherwise.
func (o *Upload) GetNewAssetSettings() Asset {
	if o == nil || o.NewAssetSettings == nil {
		var ret Asset
		return ret
	}
	return *o.NewAssetSettings
}

// GetNewAssetSettingsOk returns a tuple with the NewAssetSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upload) GetNewAssetSettingsOk() (*Asset, bool) {
	if o == nil || o.NewAssetSettings == nil {
		return nil, false
	}
	return o.NewAssetSettings, true
}

// HasNewAssetSettings returns a boolean if a field has been set.
func (o *Upload) HasNewAssetSettings() bool {
	if o != nil && o.NewAssetSettings != nil {
		return true
	}

	return false
}

// SetNewAssetSettings gets a reference to the given Asset and assigns it to the NewAssetSettings field.
func (o *Upload) SetNewAssetSettings(v Asset) {
	o.NewAssetSettings = &v
}

// GetAssetId returns the AssetId field value if set, zero value otherwise.
func (o *Upload) GetAssetId() string {
	if o == nil || o.AssetId == nil {
		var ret string
		return ret
	}
	return *o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upload) GetAssetIdOk() (*string, bool) {
	if o == nil || o.AssetId == nil {
		return nil, false
	}
	return o.AssetId, true
}

// HasAssetId returns a boolean if a field has been set.
func (o *Upload) HasAssetId() bool {
	if o != nil && o.AssetId != nil {
		return true
	}

	return false
}

// SetAssetId gets a reference to the given string and assigns it to the AssetId field.
func (o *Upload) SetAssetId(v string) {
	o.AssetId = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *Upload) GetError() UploadError {
	if o == nil || o.Error == nil {
		var ret UploadError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upload) GetErrorOk() (*UploadError, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *Upload) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given UploadError and assigns it to the Error field.
func (o *Upload) SetError(v UploadError) {
	o.Error = &v
}

// GetCorsOrigin returns the CorsOrigin field value if set, zero value otherwise.
func (o *Upload) GetCorsOrigin() string {
	if o == nil || o.CorsOrigin == nil {
		var ret string
		return ret
	}
	return *o.CorsOrigin
}

// GetCorsOriginOk returns a tuple with the CorsOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upload) GetCorsOriginOk() (*string, bool) {
	if o == nil || o.CorsOrigin == nil {
		return nil, false
	}
	return o.CorsOrigin, true
}

// HasCorsOrigin returns a boolean if a field has been set.
func (o *Upload) HasCorsOrigin() bool {
	if o != nil && o.CorsOrigin != nil {
		return true
	}

	return false
}

// SetCorsOrigin gets a reference to the given string and assigns it to the CorsOrigin field.
func (o *Upload) SetCorsOrigin(v string) {
	o.CorsOrigin = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Upload) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upload) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Upload) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Upload) SetUrl(v string) {
	o.Url = &v
}

// GetTest returns the Test field value if set, zero value otherwise.
func (o *Upload) GetTest() bool {
	if o == nil || o.Test == nil {
		var ret bool
		return ret
	}
	return *o.Test
}

// GetTestOk returns a tuple with the Test field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Upload) GetTestOk() (*bool, bool) {
	if o == nil || o.Test == nil {
		return nil, false
	}
	return o.Test, true
}

// HasTest returns a boolean if a field has been set.
func (o *Upload) HasTest() bool {
	if o != nil && o.Test != nil {
		return true
	}

	return false
}

// SetTest gets a reference to the given bool and assigns it to the Test field.
func (o *Upload) SetTest(v bool) {
	o.Test = &v
}

func (o Upload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Timeout != nil {
		toSerialize["timeout"] = o.Timeout
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.NewAssetSettings != nil {
		toSerialize["new_asset_settings"] = o.NewAssetSettings
	}
	if o.AssetId != nil {
		toSerialize["asset_id"] = o.AssetId
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.CorsOrigin != nil {
		toSerialize["cors_origin"] = o.CorsOrigin
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Test != nil {
		toSerialize["test"] = o.Test
	}
	return json.Marshal(toSerialize)
}

type NullableUpload struct {
	value *Upload
	isSet bool
}

func (v NullableUpload) Get() *Upload {
	return v.value
}

func (v *NullableUpload) Set(val *Upload) {
	v.value = val
	v.isSet = true
}

func (v NullableUpload) IsSet() bool {
	return v.isSet
}

func (v *NullableUpload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpload(val *Upload) *NullableUpload {
	return &NullableUpload{value: val, isSet: true}
}

func (v NullableUpload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


