/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
)

// ListFiltersResponseData struct for ListFiltersResponseData
type ListFiltersResponseData struct {
	Basic *[]string `json:"basic,omitempty"`
	Advanced *[]string `json:"advanced,omitempty"`
}

// NewListFiltersResponseData instantiates a new ListFiltersResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListFiltersResponseData() *ListFiltersResponseData {
	this := ListFiltersResponseData{}
	return &this
}

// NewListFiltersResponseDataWithDefaults instantiates a new ListFiltersResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListFiltersResponseDataWithDefaults() *ListFiltersResponseData {
	this := ListFiltersResponseData{}
	return &this
}

// GetBasic returns the Basic field value if set, zero value otherwise.
func (o *ListFiltersResponseData) GetBasic() []string {
	if o == nil || o.Basic == nil {
		var ret []string
		return ret
	}
	return *o.Basic
}

// GetBasicOk returns a tuple with the Basic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListFiltersResponseData) GetBasicOk() (*[]string, bool) {
	if o == nil || o.Basic == nil {
		return nil, false
	}
	return o.Basic, true
}

// HasBasic returns a boolean if a field has been set.
func (o *ListFiltersResponseData) HasBasic() bool {
	if o != nil && o.Basic != nil {
		return true
	}

	return false
}

// SetBasic gets a reference to the given []string and assigns it to the Basic field.
func (o *ListFiltersResponseData) SetBasic(v []string) {
	o.Basic = &v
}

// GetAdvanced returns the Advanced field value if set, zero value otherwise.
func (o *ListFiltersResponseData) GetAdvanced() []string {
	if o == nil || o.Advanced == nil {
		var ret []string
		return ret
	}
	return *o.Advanced
}

// GetAdvancedOk returns a tuple with the Advanced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListFiltersResponseData) GetAdvancedOk() (*[]string, bool) {
	if o == nil || o.Advanced == nil {
		return nil, false
	}
	return o.Advanced, true
}

// HasAdvanced returns a boolean if a field has been set.
func (o *ListFiltersResponseData) HasAdvanced() bool {
	if o != nil && o.Advanced != nil {
		return true
	}

	return false
}

// SetAdvanced gets a reference to the given []string and assigns it to the Advanced field.
func (o *ListFiltersResponseData) SetAdvanced(v []string) {
	o.Advanced = &v
}

func (o ListFiltersResponseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Basic != nil {
		toSerialize["basic"] = o.Basic
	}
	if o.Advanced != nil {
		toSerialize["advanced"] = o.Advanced
	}
	return json.Marshal(toSerialize)
}

type NullableListFiltersResponseData struct {
	value *ListFiltersResponseData
	isSet bool
}

func (v NullableListFiltersResponseData) Get() *ListFiltersResponseData {
	return v.value
}

func (v *NullableListFiltersResponseData) Set(val *ListFiltersResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableListFiltersResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableListFiltersResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListFiltersResponseData(val *ListFiltersResponseData) *NullableListFiltersResponseData {
	return &NullableListFiltersResponseData{value: val, isSet: true}
}

func (v NullableListFiltersResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListFiltersResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


