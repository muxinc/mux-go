/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
)

// IncidentNotification struct for IncidentNotification
type IncidentNotification struct {
	QueuedAt *string `json:"queued_at,omitempty"`
	Id *int64 `json:"id,omitempty"`
	AttemptedAt *string `json:"attempted_at,omitempty"`
}

// NewIncidentNotification instantiates a new IncidentNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncidentNotification() *IncidentNotification {
	this := IncidentNotification{}
	return &this
}

// NewIncidentNotificationWithDefaults instantiates a new IncidentNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncidentNotificationWithDefaults() *IncidentNotification {
	this := IncidentNotification{}
	return &this
}

// GetQueuedAt returns the QueuedAt field value if set, zero value otherwise.
func (o *IncidentNotification) GetQueuedAt() string {
	if o == nil || o.QueuedAt == nil {
		var ret string
		return ret
	}
	return *o.QueuedAt
}

// GetQueuedAtOk returns a tuple with the QueuedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentNotification) GetQueuedAtOk() (*string, bool) {
	if o == nil || o.QueuedAt == nil {
		return nil, false
	}
	return o.QueuedAt, true
}

// HasQueuedAt returns a boolean if a field has been set.
func (o *IncidentNotification) HasQueuedAt() bool {
	if o != nil && o.QueuedAt != nil {
		return true
	}

	return false
}

// SetQueuedAt gets a reference to the given string and assigns it to the QueuedAt field.
func (o *IncidentNotification) SetQueuedAt(v string) {
	o.QueuedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IncidentNotification) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentNotification) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IncidentNotification) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *IncidentNotification) SetId(v int64) {
	o.Id = &v
}

// GetAttemptedAt returns the AttemptedAt field value if set, zero value otherwise.
func (o *IncidentNotification) GetAttemptedAt() string {
	if o == nil || o.AttemptedAt == nil {
		var ret string
		return ret
	}
	return *o.AttemptedAt
}

// GetAttemptedAtOk returns a tuple with the AttemptedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncidentNotification) GetAttemptedAtOk() (*string, bool) {
	if o == nil || o.AttemptedAt == nil {
		return nil, false
	}
	return o.AttemptedAt, true
}

// HasAttemptedAt returns a boolean if a field has been set.
func (o *IncidentNotification) HasAttemptedAt() bool {
	if o != nil && o.AttemptedAt != nil {
		return true
	}

	return false
}

// SetAttemptedAt gets a reference to the given string and assigns it to the AttemptedAt field.
func (o *IncidentNotification) SetAttemptedAt(v string) {
	o.AttemptedAt = &v
}

func (o IncidentNotification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.QueuedAt != nil {
		toSerialize["queued_at"] = o.QueuedAt
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.AttemptedAt != nil {
		toSerialize["attempted_at"] = o.AttemptedAt
	}
	return json.Marshal(toSerialize)
}

type NullableIncidentNotification struct {
	value *IncidentNotification
	isSet bool
}

func (v NullableIncidentNotification) Get() *IncidentNotification {
	return v.value
}

func (v *NullableIncidentNotification) Set(val *IncidentNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableIncidentNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableIncidentNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncidentNotification(val *IncidentNotification) *NullableIncidentNotification {
	return &NullableIncidentNotification{value: val, isSet: true}
}

func (v NullableIncidentNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncidentNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


