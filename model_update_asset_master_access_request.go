/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
)

// UpdateAssetMasterAccessRequest struct for UpdateAssetMasterAccessRequest
type UpdateAssetMasterAccessRequest struct {
	// Add or remove access to the master version of the video.
	MasterAccess *string `json:"master_access,omitempty"`
}

// NewUpdateAssetMasterAccessRequest instantiates a new UpdateAssetMasterAccessRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAssetMasterAccessRequest() *UpdateAssetMasterAccessRequest {
	this := UpdateAssetMasterAccessRequest{}
	return &this
}

// NewUpdateAssetMasterAccessRequestWithDefaults instantiates a new UpdateAssetMasterAccessRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAssetMasterAccessRequestWithDefaults() *UpdateAssetMasterAccessRequest {
	this := UpdateAssetMasterAccessRequest{}
	return &this
}

// GetMasterAccess returns the MasterAccess field value if set, zero value otherwise.
func (o *UpdateAssetMasterAccessRequest) GetMasterAccess() string {
	if o == nil || o.MasterAccess == nil {
		var ret string
		return ret
	}
	return *o.MasterAccess
}

// GetMasterAccessOk returns a tuple with the MasterAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAssetMasterAccessRequest) GetMasterAccessOk() (*string, bool) {
	if o == nil || o.MasterAccess == nil {
		return nil, false
	}
	return o.MasterAccess, true
}

// HasMasterAccess returns a boolean if a field has been set.
func (o *UpdateAssetMasterAccessRequest) HasMasterAccess() bool {
	if o != nil && o.MasterAccess != nil {
		return true
	}

	return false
}

// SetMasterAccess gets a reference to the given string and assigns it to the MasterAccess field.
func (o *UpdateAssetMasterAccessRequest) SetMasterAccess(v string) {
	o.MasterAccess = &v
}

func (o UpdateAssetMasterAccessRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MasterAccess != nil {
		toSerialize["master_access"] = o.MasterAccess
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateAssetMasterAccessRequest struct {
	value *UpdateAssetMasterAccessRequest
	isSet bool
}

func (v NullableUpdateAssetMasterAccessRequest) Get() *UpdateAssetMasterAccessRequest {
	return v.value
}

func (v *NullableUpdateAssetMasterAccessRequest) Set(val *UpdateAssetMasterAccessRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAssetMasterAccessRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAssetMasterAccessRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAssetMasterAccessRequest(val *UpdateAssetMasterAccessRequest) *NullableUpdateAssetMasterAccessRequest {
	return &NullableUpdateAssetMasterAccessRequest{value: val, isSet: true}
}

func (v NullableUpdateAssetMasterAccessRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAssetMasterAccessRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


