/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// FiltersApiService FiltersApi service
type FiltersApiService service

type ApiListFilterValuesRequest struct {
	ctx _context.Context
	ApiService *FiltersApiService
	fILTERID string
	limit *int32
	page *int32
	filters *[]string
	timeframe *[]string
}

func (r ApiListFilterValuesRequest) Limit(limit int32) ApiListFilterValuesRequest {
	r.limit = &limit
	return r
}
func (r ApiListFilterValuesRequest) Page(page int32) ApiListFilterValuesRequest {
	r.page = &page
	return r
}
func (r ApiListFilterValuesRequest) Filters(filters []string) ApiListFilterValuesRequest {
	r.filters = &filters
	return r
}
func (r ApiListFilterValuesRequest) Timeframe(timeframe []string) ApiListFilterValuesRequest {
	r.timeframe = &timeframe
	return r
}

func (r ApiListFilterValuesRequest) Execute() (ListFilterValuesResponse, *_nethttp.Response, error) {
	return r.ApiService.ListFilterValuesExecute(r)
}

/*
 * ListFilterValues Lists values for a specific filter
 * Deprecated: The API has been replaced by the list-dimension-values API call.

Lists the values for a filter along with a total count of related views.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param fILTERID ID of the Filter
 * @return ApiListFilterValuesRequest
 */
func (a *FiltersApiService) ListFilterValues(ctx _context.Context, fILTERID string) ApiListFilterValuesRequest {
	return ApiListFilterValuesRequest{
		ApiService: a,
		ctx: ctx,
		fILTERID: fILTERID,
	}
}

/*
 * Execute executes the request
 * @return ListFilterValuesResponse
 */
func (a *FiltersApiService) ListFilterValuesExecute(r ApiListFilterValuesRequest) (ListFilterValuesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListFilterValuesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FiltersApiService.ListFilterValues")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data/v1/filters/{FILTER_ID}"
	localVarPath = strings.Replace(localVarPath, "{"+"FILTER_ID"+"}", _neturl.PathEscape(parameterToString(r.fILTERID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.filters != nil {
		t := *r.filters
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("filters[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("filters[]", parameterToString(t, "multi"))
		}
	}
	if r.timeframe != nil {
		t := *r.timeframe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("timeframe[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("timeframe[]", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListFiltersRequest struct {
	ctx _context.Context
	ApiService *FiltersApiService
}


func (r ApiListFiltersRequest) Execute() (ListFiltersResponse, *_nethttp.Response, error) {
	return r.ApiService.ListFiltersExecute(r)
}

/*
 * ListFilters List Filters
 * Deprecated: The API has been replaced by the list-dimensions API call.

Lists all the filters broken out into basic and advanced.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListFiltersRequest
 */
func (a *FiltersApiService) ListFilters(ctx _context.Context) ApiListFiltersRequest {
	return ApiListFiltersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ListFiltersResponse
 */
func (a *FiltersApiService) ListFiltersExecute(r ApiListFiltersRequest) (ListFiltersResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListFiltersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FiltersApiService.ListFilters")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data/v1/filters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
