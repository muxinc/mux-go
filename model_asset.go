/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
)

// Asset struct for Asset
type Asset struct {
	// Unique identifier for the Asset. Max 255 characters.
	Id *string `json:"id,omitempty"`
	// Time the Asset was created, defined as a Unix timestamp (seconds since epoch).
	CreatedAt *string `json:"created_at,omitempty"`
	// The status of the asset.
	Status *string `json:"status,omitempty"`
	// The duration of the asset in seconds (max duration for a single asset is 24 hours).
	Duration *float64 `json:"duration,omitempty"`
	// The maximum resolution that has been stored for the asset. The asset may be delivered at lower resolutions depending on the device and bandwidth, however it cannot be delivered at a higher value than is stored.
	MaxStoredResolution *string `json:"max_stored_resolution,omitempty"`
	// The maximum frame rate that has been stored for the asset. The asset may be delivered at lower frame rates depending on the device and bandwidth, however it cannot be delivered at a higher value than is stored. This field may return -1 if the frame rate of the input cannot be reliably determined. 
	MaxStoredFrameRate *float64 `json:"max_stored_frame_rate,omitempty"`
	// The aspect ratio of the asset in the form of `width:height`, for example `16:9`.
	AspectRatio *string `json:"aspect_ratio,omitempty"`
	// An array of Playback ID objects. Use these to create HLS playback URLs. See [Play your videos](https://docs.mux.com/guides/video/play-your-videos) for more details.
	PlaybackIds *[]PlaybackID `json:"playback_ids,omitempty"`
	// The individual media tracks that make up an asset.
	Tracks *[]Track `json:"tracks,omitempty"`
	Errors *AssetErrors `json:"errors,omitempty"`
	PerTitleEncode *bool `json:"per_title_encode,omitempty"`
	// Whether the asset is created from a live stream and the live stream is currently `active` and not in `idle` state.
	IsLive *bool `json:"is_live,omitempty"`
	// Arbitrary metadata set for the asset. Max 255 characters.
	Passthrough *string `json:"passthrough,omitempty"`
	// Unique identifier for the live stream. This is an optional parameter added when the asset is created from a live stream.
	LiveStreamId *string `json:"live_stream_id,omitempty"`
	Master *AssetMaster `json:"master,omitempty"`
	MasterAccess *string `json:"master_access,omitempty"`
	Mp4Support *string `json:"mp4_support,omitempty"`
	// Asset Identifier of the video used as the source for creating the clip.
	SourceAssetId *string `json:"source_asset_id,omitempty"`
	// Normalize the audio track loudness level. This parameter is only applicable to on-demand (not live) assets.
	NormalizeAudio *bool `json:"normalize_audio,omitempty"`
	StaticRenditions *AssetStaticRenditions `json:"static_renditions,omitempty"`
	// An array of individual live stream recording sessions. A recording session is created on each encoder connection during the live stream
	RecordingTimes *[]AssetRecordingTimes `json:"recording_times,omitempty"`
	NonStandardInputReasons *AssetNonStandardInputReasons `json:"non_standard_input_reasons,omitempty"`
	// True means this live stream is a test asset. A test asset can help evaluate the Mux Video APIs without incurring any cost. There is no limit on number of test assets created. Test assets are watermarked with the Mux logo, limited to 10 seconds, and deleted after 24 hrs.
	Test *bool `json:"test,omitempty"`
}

// NewAsset instantiates a new Asset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsset() *Asset {
	this := Asset{}
	var masterAccess string = "none"
	this.MasterAccess = &masterAccess
	var mp4Support string = "none"
	this.Mp4Support = &mp4Support
	var normalizeAudio bool = false
	this.NormalizeAudio = &normalizeAudio
	return &this
}

// NewAssetWithDefaults instantiates a new Asset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetWithDefaults() *Asset {
	this := Asset{}
	var masterAccess string = "none"
	this.MasterAccess = &masterAccess
	var mp4Support string = "none"
	this.Mp4Support = &mp4Support
	var normalizeAudio bool = false
	this.NormalizeAudio = &normalizeAudio
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Asset) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Asset) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Asset) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Asset) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Asset) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *Asset) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Asset) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Asset) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Asset) SetStatus(v string) {
	o.Status = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *Asset) GetDuration() float64 {
	if o == nil || o.Duration == nil {
		var ret float64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetDurationOk() (*float64, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *Asset) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float64 and assigns it to the Duration field.
func (o *Asset) SetDuration(v float64) {
	o.Duration = &v
}

// GetMaxStoredResolution returns the MaxStoredResolution field value if set, zero value otherwise.
func (o *Asset) GetMaxStoredResolution() string {
	if o == nil || o.MaxStoredResolution == nil {
		var ret string
		return ret
	}
	return *o.MaxStoredResolution
}

// GetMaxStoredResolutionOk returns a tuple with the MaxStoredResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetMaxStoredResolutionOk() (*string, bool) {
	if o == nil || o.MaxStoredResolution == nil {
		return nil, false
	}
	return o.MaxStoredResolution, true
}

// HasMaxStoredResolution returns a boolean if a field has been set.
func (o *Asset) HasMaxStoredResolution() bool {
	if o != nil && o.MaxStoredResolution != nil {
		return true
	}

	return false
}

// SetMaxStoredResolution gets a reference to the given string and assigns it to the MaxStoredResolution field.
func (o *Asset) SetMaxStoredResolution(v string) {
	o.MaxStoredResolution = &v
}

// GetMaxStoredFrameRate returns the MaxStoredFrameRate field value if set, zero value otherwise.
func (o *Asset) GetMaxStoredFrameRate() float64 {
	if o == nil || o.MaxStoredFrameRate == nil {
		var ret float64
		return ret
	}
	return *o.MaxStoredFrameRate
}

// GetMaxStoredFrameRateOk returns a tuple with the MaxStoredFrameRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetMaxStoredFrameRateOk() (*float64, bool) {
	if o == nil || o.MaxStoredFrameRate == nil {
		return nil, false
	}
	return o.MaxStoredFrameRate, true
}

// HasMaxStoredFrameRate returns a boolean if a field has been set.
func (o *Asset) HasMaxStoredFrameRate() bool {
	if o != nil && o.MaxStoredFrameRate != nil {
		return true
	}

	return false
}

// SetMaxStoredFrameRate gets a reference to the given float64 and assigns it to the MaxStoredFrameRate field.
func (o *Asset) SetMaxStoredFrameRate(v float64) {
	o.MaxStoredFrameRate = &v
}

// GetAspectRatio returns the AspectRatio field value if set, zero value otherwise.
func (o *Asset) GetAspectRatio() string {
	if o == nil || o.AspectRatio == nil {
		var ret string
		return ret
	}
	return *o.AspectRatio
}

// GetAspectRatioOk returns a tuple with the AspectRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetAspectRatioOk() (*string, bool) {
	if o == nil || o.AspectRatio == nil {
		return nil, false
	}
	return o.AspectRatio, true
}

// HasAspectRatio returns a boolean if a field has been set.
func (o *Asset) HasAspectRatio() bool {
	if o != nil && o.AspectRatio != nil {
		return true
	}

	return false
}

// SetAspectRatio gets a reference to the given string and assigns it to the AspectRatio field.
func (o *Asset) SetAspectRatio(v string) {
	o.AspectRatio = &v
}

// GetPlaybackIds returns the PlaybackIds field value if set, zero value otherwise.
func (o *Asset) GetPlaybackIds() []PlaybackID {
	if o == nil || o.PlaybackIds == nil {
		var ret []PlaybackID
		return ret
	}
	return *o.PlaybackIds
}

// GetPlaybackIdsOk returns a tuple with the PlaybackIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetPlaybackIdsOk() (*[]PlaybackID, bool) {
	if o == nil || o.PlaybackIds == nil {
		return nil, false
	}
	return o.PlaybackIds, true
}

// HasPlaybackIds returns a boolean if a field has been set.
func (o *Asset) HasPlaybackIds() bool {
	if o != nil && o.PlaybackIds != nil {
		return true
	}

	return false
}

// SetPlaybackIds gets a reference to the given []PlaybackID and assigns it to the PlaybackIds field.
func (o *Asset) SetPlaybackIds(v []PlaybackID) {
	o.PlaybackIds = &v
}

// GetTracks returns the Tracks field value if set, zero value otherwise.
func (o *Asset) GetTracks() []Track {
	if o == nil || o.Tracks == nil {
		var ret []Track
		return ret
	}
	return *o.Tracks
}

// GetTracksOk returns a tuple with the Tracks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetTracksOk() (*[]Track, bool) {
	if o == nil || o.Tracks == nil {
		return nil, false
	}
	return o.Tracks, true
}

// HasTracks returns a boolean if a field has been set.
func (o *Asset) HasTracks() bool {
	if o != nil && o.Tracks != nil {
		return true
	}

	return false
}

// SetTracks gets a reference to the given []Track and assigns it to the Tracks field.
func (o *Asset) SetTracks(v []Track) {
	o.Tracks = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *Asset) GetErrors() AssetErrors {
	if o == nil || o.Errors == nil {
		var ret AssetErrors
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetErrorsOk() (*AssetErrors, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *Asset) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given AssetErrors and assigns it to the Errors field.
func (o *Asset) SetErrors(v AssetErrors) {
	o.Errors = &v
}

// GetPerTitleEncode returns the PerTitleEncode field value if set, zero value otherwise.
func (o *Asset) GetPerTitleEncode() bool {
	if o == nil || o.PerTitleEncode == nil {
		var ret bool
		return ret
	}
	return *o.PerTitleEncode
}

// GetPerTitleEncodeOk returns a tuple with the PerTitleEncode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetPerTitleEncodeOk() (*bool, bool) {
	if o == nil || o.PerTitleEncode == nil {
		return nil, false
	}
	return o.PerTitleEncode, true
}

// HasPerTitleEncode returns a boolean if a field has been set.
func (o *Asset) HasPerTitleEncode() bool {
	if o != nil && o.PerTitleEncode != nil {
		return true
	}

	return false
}

// SetPerTitleEncode gets a reference to the given bool and assigns it to the PerTitleEncode field.
func (o *Asset) SetPerTitleEncode(v bool) {
	o.PerTitleEncode = &v
}

// GetIsLive returns the IsLive field value if set, zero value otherwise.
func (o *Asset) GetIsLive() bool {
	if o == nil || o.IsLive == nil {
		var ret bool
		return ret
	}
	return *o.IsLive
}

// GetIsLiveOk returns a tuple with the IsLive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetIsLiveOk() (*bool, bool) {
	if o == nil || o.IsLive == nil {
		return nil, false
	}
	return o.IsLive, true
}

// HasIsLive returns a boolean if a field has been set.
func (o *Asset) HasIsLive() bool {
	if o != nil && o.IsLive != nil {
		return true
	}

	return false
}

// SetIsLive gets a reference to the given bool and assigns it to the IsLive field.
func (o *Asset) SetIsLive(v bool) {
	o.IsLive = &v
}

// GetPassthrough returns the Passthrough field value if set, zero value otherwise.
func (o *Asset) GetPassthrough() string {
	if o == nil || o.Passthrough == nil {
		var ret string
		return ret
	}
	return *o.Passthrough
}

// GetPassthroughOk returns a tuple with the Passthrough field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetPassthroughOk() (*string, bool) {
	if o == nil || o.Passthrough == nil {
		return nil, false
	}
	return o.Passthrough, true
}

// HasPassthrough returns a boolean if a field has been set.
func (o *Asset) HasPassthrough() bool {
	if o != nil && o.Passthrough != nil {
		return true
	}

	return false
}

// SetPassthrough gets a reference to the given string and assigns it to the Passthrough field.
func (o *Asset) SetPassthrough(v string) {
	o.Passthrough = &v
}

// GetLiveStreamId returns the LiveStreamId field value if set, zero value otherwise.
func (o *Asset) GetLiveStreamId() string {
	if o == nil || o.LiveStreamId == nil {
		var ret string
		return ret
	}
	return *o.LiveStreamId
}

// GetLiveStreamIdOk returns a tuple with the LiveStreamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetLiveStreamIdOk() (*string, bool) {
	if o == nil || o.LiveStreamId == nil {
		return nil, false
	}
	return o.LiveStreamId, true
}

// HasLiveStreamId returns a boolean if a field has been set.
func (o *Asset) HasLiveStreamId() bool {
	if o != nil && o.LiveStreamId != nil {
		return true
	}

	return false
}

// SetLiveStreamId gets a reference to the given string and assigns it to the LiveStreamId field.
func (o *Asset) SetLiveStreamId(v string) {
	o.LiveStreamId = &v
}

// GetMaster returns the Master field value if set, zero value otherwise.
func (o *Asset) GetMaster() AssetMaster {
	if o == nil || o.Master == nil {
		var ret AssetMaster
		return ret
	}
	return *o.Master
}

// GetMasterOk returns a tuple with the Master field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetMasterOk() (*AssetMaster, bool) {
	if o == nil || o.Master == nil {
		return nil, false
	}
	return o.Master, true
}

// HasMaster returns a boolean if a field has been set.
func (o *Asset) HasMaster() bool {
	if o != nil && o.Master != nil {
		return true
	}

	return false
}

// SetMaster gets a reference to the given AssetMaster and assigns it to the Master field.
func (o *Asset) SetMaster(v AssetMaster) {
	o.Master = &v
}

// GetMasterAccess returns the MasterAccess field value if set, zero value otherwise.
func (o *Asset) GetMasterAccess() string {
	if o == nil || o.MasterAccess == nil {
		var ret string
		return ret
	}
	return *o.MasterAccess
}

// GetMasterAccessOk returns a tuple with the MasterAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetMasterAccessOk() (*string, bool) {
	if o == nil || o.MasterAccess == nil {
		return nil, false
	}
	return o.MasterAccess, true
}

// HasMasterAccess returns a boolean if a field has been set.
func (o *Asset) HasMasterAccess() bool {
	if o != nil && o.MasterAccess != nil {
		return true
	}

	return false
}

// SetMasterAccess gets a reference to the given string and assigns it to the MasterAccess field.
func (o *Asset) SetMasterAccess(v string) {
	o.MasterAccess = &v
}

// GetMp4Support returns the Mp4Support field value if set, zero value otherwise.
func (o *Asset) GetMp4Support() string {
	if o == nil || o.Mp4Support == nil {
		var ret string
		return ret
	}
	return *o.Mp4Support
}

// GetMp4SupportOk returns a tuple with the Mp4Support field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetMp4SupportOk() (*string, bool) {
	if o == nil || o.Mp4Support == nil {
		return nil, false
	}
	return o.Mp4Support, true
}

// HasMp4Support returns a boolean if a field has been set.
func (o *Asset) HasMp4Support() bool {
	if o != nil && o.Mp4Support != nil {
		return true
	}

	return false
}

// SetMp4Support gets a reference to the given string and assigns it to the Mp4Support field.
func (o *Asset) SetMp4Support(v string) {
	o.Mp4Support = &v
}

// GetSourceAssetId returns the SourceAssetId field value if set, zero value otherwise.
func (o *Asset) GetSourceAssetId() string {
	if o == nil || o.SourceAssetId == nil {
		var ret string
		return ret
	}
	return *o.SourceAssetId
}

// GetSourceAssetIdOk returns a tuple with the SourceAssetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetSourceAssetIdOk() (*string, bool) {
	if o == nil || o.SourceAssetId == nil {
		return nil, false
	}
	return o.SourceAssetId, true
}

// HasSourceAssetId returns a boolean if a field has been set.
func (o *Asset) HasSourceAssetId() bool {
	if o != nil && o.SourceAssetId != nil {
		return true
	}

	return false
}

// SetSourceAssetId gets a reference to the given string and assigns it to the SourceAssetId field.
func (o *Asset) SetSourceAssetId(v string) {
	o.SourceAssetId = &v
}

// GetNormalizeAudio returns the NormalizeAudio field value if set, zero value otherwise.
func (o *Asset) GetNormalizeAudio() bool {
	if o == nil || o.NormalizeAudio == nil {
		var ret bool
		return ret
	}
	return *o.NormalizeAudio
}

// GetNormalizeAudioOk returns a tuple with the NormalizeAudio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetNormalizeAudioOk() (*bool, bool) {
	if o == nil || o.NormalizeAudio == nil {
		return nil, false
	}
	return o.NormalizeAudio, true
}

// HasNormalizeAudio returns a boolean if a field has been set.
func (o *Asset) HasNormalizeAudio() bool {
	if o != nil && o.NormalizeAudio != nil {
		return true
	}

	return false
}

// SetNormalizeAudio gets a reference to the given bool and assigns it to the NormalizeAudio field.
func (o *Asset) SetNormalizeAudio(v bool) {
	o.NormalizeAudio = &v
}

// GetStaticRenditions returns the StaticRenditions field value if set, zero value otherwise.
func (o *Asset) GetStaticRenditions() AssetStaticRenditions {
	if o == nil || o.StaticRenditions == nil {
		var ret AssetStaticRenditions
		return ret
	}
	return *o.StaticRenditions
}

// GetStaticRenditionsOk returns a tuple with the StaticRenditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetStaticRenditionsOk() (*AssetStaticRenditions, bool) {
	if o == nil || o.StaticRenditions == nil {
		return nil, false
	}
	return o.StaticRenditions, true
}

// HasStaticRenditions returns a boolean if a field has been set.
func (o *Asset) HasStaticRenditions() bool {
	if o != nil && o.StaticRenditions != nil {
		return true
	}

	return false
}

// SetStaticRenditions gets a reference to the given AssetStaticRenditions and assigns it to the StaticRenditions field.
func (o *Asset) SetStaticRenditions(v AssetStaticRenditions) {
	o.StaticRenditions = &v
}

// GetRecordingTimes returns the RecordingTimes field value if set, zero value otherwise.
func (o *Asset) GetRecordingTimes() []AssetRecordingTimes {
	if o == nil || o.RecordingTimes == nil {
		var ret []AssetRecordingTimes
		return ret
	}
	return *o.RecordingTimes
}

// GetRecordingTimesOk returns a tuple with the RecordingTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetRecordingTimesOk() (*[]AssetRecordingTimes, bool) {
	if o == nil || o.RecordingTimes == nil {
		return nil, false
	}
	return o.RecordingTimes, true
}

// HasRecordingTimes returns a boolean if a field has been set.
func (o *Asset) HasRecordingTimes() bool {
	if o != nil && o.RecordingTimes != nil {
		return true
	}

	return false
}

// SetRecordingTimes gets a reference to the given []AssetRecordingTimes and assigns it to the RecordingTimes field.
func (o *Asset) SetRecordingTimes(v []AssetRecordingTimes) {
	o.RecordingTimes = &v
}

// GetNonStandardInputReasons returns the NonStandardInputReasons field value if set, zero value otherwise.
func (o *Asset) GetNonStandardInputReasons() AssetNonStandardInputReasons {
	if o == nil || o.NonStandardInputReasons == nil {
		var ret AssetNonStandardInputReasons
		return ret
	}
	return *o.NonStandardInputReasons
}

// GetNonStandardInputReasonsOk returns a tuple with the NonStandardInputReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetNonStandardInputReasonsOk() (*AssetNonStandardInputReasons, bool) {
	if o == nil || o.NonStandardInputReasons == nil {
		return nil, false
	}
	return o.NonStandardInputReasons, true
}

// HasNonStandardInputReasons returns a boolean if a field has been set.
func (o *Asset) HasNonStandardInputReasons() bool {
	if o != nil && o.NonStandardInputReasons != nil {
		return true
	}

	return false
}

// SetNonStandardInputReasons gets a reference to the given AssetNonStandardInputReasons and assigns it to the NonStandardInputReasons field.
func (o *Asset) SetNonStandardInputReasons(v AssetNonStandardInputReasons) {
	o.NonStandardInputReasons = &v
}

// GetTest returns the Test field value if set, zero value otherwise.
func (o *Asset) GetTest() bool {
	if o == nil || o.Test == nil {
		var ret bool
		return ret
	}
	return *o.Test
}

// GetTestOk returns a tuple with the Test field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Asset) GetTestOk() (*bool, bool) {
	if o == nil || o.Test == nil {
		return nil, false
	}
	return o.Test, true
}

// HasTest returns a boolean if a field has been set.
func (o *Asset) HasTest() bool {
	if o != nil && o.Test != nil {
		return true
	}

	return false
}

// SetTest gets a reference to the given bool and assigns it to the Test field.
func (o *Asset) SetTest(v bool) {
	o.Test = &v
}

func (o Asset) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	if o.MaxStoredResolution != nil {
		toSerialize["max_stored_resolution"] = o.MaxStoredResolution
	}
	if o.MaxStoredFrameRate != nil {
		toSerialize["max_stored_frame_rate"] = o.MaxStoredFrameRate
	}
	if o.AspectRatio != nil {
		toSerialize["aspect_ratio"] = o.AspectRatio
	}
	if o.PlaybackIds != nil {
		toSerialize["playback_ids"] = o.PlaybackIds
	}
	if o.Tracks != nil {
		toSerialize["tracks"] = o.Tracks
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	if o.PerTitleEncode != nil {
		toSerialize["per_title_encode"] = o.PerTitleEncode
	}
	if o.IsLive != nil {
		toSerialize["is_live"] = o.IsLive
	}
	if o.Passthrough != nil {
		toSerialize["passthrough"] = o.Passthrough
	}
	if o.LiveStreamId != nil {
		toSerialize["live_stream_id"] = o.LiveStreamId
	}
	if o.Master != nil {
		toSerialize["master"] = o.Master
	}
	if o.MasterAccess != nil {
		toSerialize["master_access"] = o.MasterAccess
	}
	if o.Mp4Support != nil {
		toSerialize["mp4_support"] = o.Mp4Support
	}
	if o.SourceAssetId != nil {
		toSerialize["source_asset_id"] = o.SourceAssetId
	}
	if o.NormalizeAudio != nil {
		toSerialize["normalize_audio"] = o.NormalizeAudio
	}
	if o.StaticRenditions != nil {
		toSerialize["static_renditions"] = o.StaticRenditions
	}
	if o.RecordingTimes != nil {
		toSerialize["recording_times"] = o.RecordingTimes
	}
	if o.NonStandardInputReasons != nil {
		toSerialize["non_standard_input_reasons"] = o.NonStandardInputReasons
	}
	if o.Test != nil {
		toSerialize["test"] = o.Test
	}
	return json.Marshal(toSerialize)
}

type NullableAsset struct {
	value *Asset
	isSet bool
}

func (v NullableAsset) Get() *Asset {
	return v.value
}

func (v *NullableAsset) Set(val *Asset) {
	v.value = val
	v.isSet = true
}

func (v NullableAsset) IsSet() bool {
	return v.isSet
}

func (v *NullableAsset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsset(val *Asset) *NullableAsset {
	return &NullableAsset{value: val, isSet: true}
}

func (v NullableAsset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


