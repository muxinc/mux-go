/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// VideoViewsApiService VideoViewsApi service
type VideoViewsApiService service

type ApiGetVideoViewRequest struct {
	ctx _context.Context
	ApiService *VideoViewsApiService
	vIDEOVIEWID string
}


func (r ApiGetVideoViewRequest) Execute() (VideoViewResponse, *_nethttp.Response, error) {
	return r.ApiService.GetVideoViewExecute(r)
}

/*
 * GetVideoView Get a Video View
 * Returns the details of a video view

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param vIDEOVIEWID ID of the Video View
 * @return ApiGetVideoViewRequest
 */
func (a *VideoViewsApiService) GetVideoView(ctx _context.Context, vIDEOVIEWID string) ApiGetVideoViewRequest {
	return ApiGetVideoViewRequest{
		ApiService: a,
		ctx: ctx,
		vIDEOVIEWID: vIDEOVIEWID,
	}
}

/*
 * Execute executes the request
 * @return VideoViewResponse
 */
func (a *VideoViewsApiService) GetVideoViewExecute(r ApiGetVideoViewRequest) (VideoViewResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  VideoViewResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideoViewsApiService.GetVideoView")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data/v1/video-views/{VIDEO_VIEW_ID}"
	localVarPath = strings.Replace(localVarPath, "{"+"VIDEO_VIEW_ID"+"}", _neturl.PathEscape(parameterToString(r.vIDEOVIEWID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListVideoViewsRequest struct {
	ctx _context.Context
	ApiService *VideoViewsApiService
	limit *int32
	page *int32
	viewerId *string
	errorId *int32
	orderDirection *string
	filters *[]string
	timeframe *[]string
}

func (r ApiListVideoViewsRequest) Limit(limit int32) ApiListVideoViewsRequest {
	r.limit = &limit
	return r
}
func (r ApiListVideoViewsRequest) Page(page int32) ApiListVideoViewsRequest {
	r.page = &page
	return r
}
func (r ApiListVideoViewsRequest) ViewerId(viewerId string) ApiListVideoViewsRequest {
	r.viewerId = &viewerId
	return r
}
func (r ApiListVideoViewsRequest) ErrorId(errorId int32) ApiListVideoViewsRequest {
	r.errorId = &errorId
	return r
}
func (r ApiListVideoViewsRequest) OrderDirection(orderDirection string) ApiListVideoViewsRequest {
	r.orderDirection = &orderDirection
	return r
}
func (r ApiListVideoViewsRequest) Filters(filters []string) ApiListVideoViewsRequest {
	r.filters = &filters
	return r
}
func (r ApiListVideoViewsRequest) Timeframe(timeframe []string) ApiListVideoViewsRequest {
	r.timeframe = &timeframe
	return r
}

func (r ApiListVideoViewsRequest) Execute() (ListVideoViewsResponse, *_nethttp.Response, error) {
	return r.ApiService.ListVideoViewsExecute(r)
}

/*
 * ListVideoViews List Video Views
 * Returns a list of video views

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListVideoViewsRequest
 */
func (a *VideoViewsApiService) ListVideoViews(ctx _context.Context) ApiListVideoViewsRequest {
	return ApiListVideoViewsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ListVideoViewsResponse
 */
func (a *VideoViewsApiService) ListVideoViewsExecute(r ApiListVideoViewsRequest) (ListVideoViewsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListVideoViewsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideoViewsApiService.ListVideoViews")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data/v1/video-views"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.viewerId != nil {
		localVarQueryParams.Add("viewer_id", parameterToString(*r.viewerId, ""))
	}
	if r.errorId != nil {
		localVarQueryParams.Add("error_id", parameterToString(*r.errorId, ""))
	}
	if r.orderDirection != nil {
		localVarQueryParams.Add("order_direction", parameterToString(*r.orderDirection, ""))
	}
	if r.filters != nil {
		t := *r.filters
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("filters[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("filters[]", parameterToString(t, "multi"))
		}
	}
	if r.timeframe != nil {
		t := *r.timeframe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("timeframe[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("timeframe[]", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
