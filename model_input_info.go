/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
)

// InputInfo struct for InputInfo
type InputInfo struct {
	Settings *InputSettings `json:"settings,omitempty"`
	File *InputFile `json:"file,omitempty"`
}

// NewInputInfo instantiates a new InputInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputInfo() *InputInfo {
	this := InputInfo{}
	return &this
}

// NewInputInfoWithDefaults instantiates a new InputInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputInfoWithDefaults() *InputInfo {
	this := InputInfo{}
	return &this
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *InputInfo) GetSettings() InputSettings {
	if o == nil || o.Settings == nil {
		var ret InputSettings
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputInfo) GetSettingsOk() (*InputSettings, bool) {
	if o == nil || o.Settings == nil {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *InputInfo) HasSettings() bool {
	if o != nil && o.Settings != nil {
		return true
	}

	return false
}

// SetSettings gets a reference to the given InputSettings and assigns it to the Settings field.
func (o *InputInfo) SetSettings(v InputSettings) {
	o.Settings = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *InputInfo) GetFile() InputFile {
	if o == nil || o.File == nil {
		var ret InputFile
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputInfo) GetFileOk() (*InputFile, bool) {
	if o == nil || o.File == nil {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *InputInfo) HasFile() bool {
	if o != nil && o.File != nil {
		return true
	}

	return false
}

// SetFile gets a reference to the given InputFile and assigns it to the File field.
func (o *InputInfo) SetFile(v InputFile) {
	o.File = &v
}

func (o InputInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Settings != nil {
		toSerialize["settings"] = o.Settings
	}
	if o.File != nil {
		toSerialize["file"] = o.File
	}
	return json.Marshal(toSerialize)
}

type NullableInputInfo struct {
	value *InputInfo
	isSet bool
}

func (v NullableInputInfo) Get() *InputInfo {
	return v.value
}

func (v *NullableInputInfo) Set(val *InputInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableInputInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableInputInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputInfo(val *InputInfo) *NullableInputInfo {
	return &NullableInputInfo{value: val, isSet: true}
}

func (v NullableInputInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


