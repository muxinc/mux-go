/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
)

// RealTimeBreakdownValue struct for RealTimeBreakdownValue
type RealTimeBreakdownValue struct {
	Value *string `json:"value,omitempty"`
	NegativeImpact *int64 `json:"negative_impact,omitempty"`
	MetricValue *float64 `json:"metric_value,omitempty"`
	DisplayValue *string `json:"display_value,omitempty"`
	ConcurentViewers *int64 `json:"concurent_viewers,omitempty"`
}

// NewRealTimeBreakdownValue instantiates a new RealTimeBreakdownValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealTimeBreakdownValue() *RealTimeBreakdownValue {
	this := RealTimeBreakdownValue{}
	return &this
}

// NewRealTimeBreakdownValueWithDefaults instantiates a new RealTimeBreakdownValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealTimeBreakdownValueWithDefaults() *RealTimeBreakdownValue {
	this := RealTimeBreakdownValue{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *RealTimeBreakdownValue) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeBreakdownValue) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *RealTimeBreakdownValue) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *RealTimeBreakdownValue) SetValue(v string) {
	o.Value = &v
}

// GetNegativeImpact returns the NegativeImpact field value if set, zero value otherwise.
func (o *RealTimeBreakdownValue) GetNegativeImpact() int64 {
	if o == nil || o.NegativeImpact == nil {
		var ret int64
		return ret
	}
	return *o.NegativeImpact
}

// GetNegativeImpactOk returns a tuple with the NegativeImpact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeBreakdownValue) GetNegativeImpactOk() (*int64, bool) {
	if o == nil || o.NegativeImpact == nil {
		return nil, false
	}
	return o.NegativeImpact, true
}

// HasNegativeImpact returns a boolean if a field has been set.
func (o *RealTimeBreakdownValue) HasNegativeImpact() bool {
	if o != nil && o.NegativeImpact != nil {
		return true
	}

	return false
}

// SetNegativeImpact gets a reference to the given int64 and assigns it to the NegativeImpact field.
func (o *RealTimeBreakdownValue) SetNegativeImpact(v int64) {
	o.NegativeImpact = &v
}

// GetMetricValue returns the MetricValue field value if set, zero value otherwise.
func (o *RealTimeBreakdownValue) GetMetricValue() float64 {
	if o == nil || o.MetricValue == nil {
		var ret float64
		return ret
	}
	return *o.MetricValue
}

// GetMetricValueOk returns a tuple with the MetricValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeBreakdownValue) GetMetricValueOk() (*float64, bool) {
	if o == nil || o.MetricValue == nil {
		return nil, false
	}
	return o.MetricValue, true
}

// HasMetricValue returns a boolean if a field has been set.
func (o *RealTimeBreakdownValue) HasMetricValue() bool {
	if o != nil && o.MetricValue != nil {
		return true
	}

	return false
}

// SetMetricValue gets a reference to the given float64 and assigns it to the MetricValue field.
func (o *RealTimeBreakdownValue) SetMetricValue(v float64) {
	o.MetricValue = &v
}

// GetDisplayValue returns the DisplayValue field value if set, zero value otherwise.
func (o *RealTimeBreakdownValue) GetDisplayValue() string {
	if o == nil || o.DisplayValue == nil {
		var ret string
		return ret
	}
	return *o.DisplayValue
}

// GetDisplayValueOk returns a tuple with the DisplayValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeBreakdownValue) GetDisplayValueOk() (*string, bool) {
	if o == nil || o.DisplayValue == nil {
		return nil, false
	}
	return o.DisplayValue, true
}

// HasDisplayValue returns a boolean if a field has been set.
func (o *RealTimeBreakdownValue) HasDisplayValue() bool {
	if o != nil && o.DisplayValue != nil {
		return true
	}

	return false
}

// SetDisplayValue gets a reference to the given string and assigns it to the DisplayValue field.
func (o *RealTimeBreakdownValue) SetDisplayValue(v string) {
	o.DisplayValue = &v
}

// GetConcurentViewers returns the ConcurentViewers field value if set, zero value otherwise.
func (o *RealTimeBreakdownValue) GetConcurentViewers() int64 {
	if o == nil || o.ConcurentViewers == nil {
		var ret int64
		return ret
	}
	return *o.ConcurentViewers
}

// GetConcurentViewersOk returns a tuple with the ConcurentViewers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeBreakdownValue) GetConcurentViewersOk() (*int64, bool) {
	if o == nil || o.ConcurentViewers == nil {
		return nil, false
	}
	return o.ConcurentViewers, true
}

// HasConcurentViewers returns a boolean if a field has been set.
func (o *RealTimeBreakdownValue) HasConcurentViewers() bool {
	if o != nil && o.ConcurentViewers != nil {
		return true
	}

	return false
}

// SetConcurentViewers gets a reference to the given int64 and assigns it to the ConcurentViewers field.
func (o *RealTimeBreakdownValue) SetConcurentViewers(v int64) {
	o.ConcurentViewers = &v
}

func (o RealTimeBreakdownValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.NegativeImpact != nil {
		toSerialize["negative_impact"] = o.NegativeImpact
	}
	if o.MetricValue != nil {
		toSerialize["metric_value"] = o.MetricValue
	}
	if o.DisplayValue != nil {
		toSerialize["display_value"] = o.DisplayValue
	}
	if o.ConcurentViewers != nil {
		toSerialize["concurent_viewers"] = o.ConcurentViewers
	}
	return json.Marshal(toSerialize)
}

type NullableRealTimeBreakdownValue struct {
	value *RealTimeBreakdownValue
	isSet bool
}

func (v NullableRealTimeBreakdownValue) Get() *RealTimeBreakdownValue {
	return v.value
}

func (v *NullableRealTimeBreakdownValue) Set(val *RealTimeBreakdownValue) {
	v.value = val
	v.isSet = true
}

func (v NullableRealTimeBreakdownValue) IsSet() bool {
	return v.isSet
}

func (v *NullableRealTimeBreakdownValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealTimeBreakdownValue(val *RealTimeBreakdownValue) *NullableRealTimeBreakdownValue {
	return &NullableRealTimeBreakdownValue{value: val, isSet: true}
}

func (v NullableRealTimeBreakdownValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealTimeBreakdownValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


