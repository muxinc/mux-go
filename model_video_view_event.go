/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
)

// VideoViewEvent struct for VideoViewEvent
type VideoViewEvent struct {
	ViewerTime *int64 `json:"viewer_time,omitempty"`
	PlaybackTime *int64 `json:"playback_time,omitempty"`
	Name *string `json:"name,omitempty"`
	EventTime *int64 `json:"event_time,omitempty"`
}

// NewVideoViewEvent instantiates a new VideoViewEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoViewEvent() *VideoViewEvent {
	this := VideoViewEvent{}
	return &this
}

// NewVideoViewEventWithDefaults instantiates a new VideoViewEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoViewEventWithDefaults() *VideoViewEvent {
	this := VideoViewEvent{}
	return &this
}

// GetViewerTime returns the ViewerTime field value if set, zero value otherwise.
func (o *VideoViewEvent) GetViewerTime() int64 {
	if o == nil || o.ViewerTime == nil {
		var ret int64
		return ret
	}
	return *o.ViewerTime
}

// GetViewerTimeOk returns a tuple with the ViewerTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoViewEvent) GetViewerTimeOk() (*int64, bool) {
	if o == nil || o.ViewerTime == nil {
		return nil, false
	}
	return o.ViewerTime, true
}

// HasViewerTime returns a boolean if a field has been set.
func (o *VideoViewEvent) HasViewerTime() bool {
	if o != nil && o.ViewerTime != nil {
		return true
	}

	return false
}

// SetViewerTime gets a reference to the given int64 and assigns it to the ViewerTime field.
func (o *VideoViewEvent) SetViewerTime(v int64) {
	o.ViewerTime = &v
}

// GetPlaybackTime returns the PlaybackTime field value if set, zero value otherwise.
func (o *VideoViewEvent) GetPlaybackTime() int64 {
	if o == nil || o.PlaybackTime == nil {
		var ret int64
		return ret
	}
	return *o.PlaybackTime
}

// GetPlaybackTimeOk returns a tuple with the PlaybackTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoViewEvent) GetPlaybackTimeOk() (*int64, bool) {
	if o == nil || o.PlaybackTime == nil {
		return nil, false
	}
	return o.PlaybackTime, true
}

// HasPlaybackTime returns a boolean if a field has been set.
func (o *VideoViewEvent) HasPlaybackTime() bool {
	if o != nil && o.PlaybackTime != nil {
		return true
	}

	return false
}

// SetPlaybackTime gets a reference to the given int64 and assigns it to the PlaybackTime field.
func (o *VideoViewEvent) SetPlaybackTime(v int64) {
	o.PlaybackTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VideoViewEvent) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoViewEvent) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VideoViewEvent) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VideoViewEvent) SetName(v string) {
	o.Name = &v
}

// GetEventTime returns the EventTime field value if set, zero value otherwise.
func (o *VideoViewEvent) GetEventTime() int64 {
	if o == nil || o.EventTime == nil {
		var ret int64
		return ret
	}
	return *o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoViewEvent) GetEventTimeOk() (*int64, bool) {
	if o == nil || o.EventTime == nil {
		return nil, false
	}
	return o.EventTime, true
}

// HasEventTime returns a boolean if a field has been set.
func (o *VideoViewEvent) HasEventTime() bool {
	if o != nil && o.EventTime != nil {
		return true
	}

	return false
}

// SetEventTime gets a reference to the given int64 and assigns it to the EventTime field.
func (o *VideoViewEvent) SetEventTime(v int64) {
	o.EventTime = &v
}

func (o VideoViewEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ViewerTime != nil {
		toSerialize["viewer_time"] = o.ViewerTime
	}
	if o.PlaybackTime != nil {
		toSerialize["playback_time"] = o.PlaybackTime
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.EventTime != nil {
		toSerialize["event_time"] = o.EventTime
	}
	return json.Marshal(toSerialize)
}

type NullableVideoViewEvent struct {
	value *VideoViewEvent
	isSet bool
}

func (v NullableVideoViewEvent) Get() *VideoViewEvent {
	return v.value
}

func (v *NullableVideoViewEvent) Set(val *VideoViewEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoViewEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoViewEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoViewEvent(val *VideoViewEvent) *NullableVideoViewEvent {
	return &NullableVideoViewEvent{value: val, isSet: true}
}

func (v NullableVideoViewEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideoViewEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


