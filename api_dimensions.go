/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// DimensionsApiService DimensionsApi service
type DimensionsApiService service

type ApiListDimensionValuesRequest struct {
	ctx _context.Context
	ApiService *DimensionsApiService
	dIMENSIONID string
	limit *int32
	page *int32
	filters *[]string
	timeframe *[]string
}

func (r ApiListDimensionValuesRequest) Limit(limit int32) ApiListDimensionValuesRequest {
	r.limit = &limit
	return r
}
func (r ApiListDimensionValuesRequest) Page(page int32) ApiListDimensionValuesRequest {
	r.page = &page
	return r
}
func (r ApiListDimensionValuesRequest) Filters(filters []string) ApiListDimensionValuesRequest {
	r.filters = &filters
	return r
}
func (r ApiListDimensionValuesRequest) Timeframe(timeframe []string) ApiListDimensionValuesRequest {
	r.timeframe = &timeframe
	return r
}

func (r ApiListDimensionValuesRequest) Execute() (ListDimensionValuesResponse, *_nethttp.Response, error) {
	return r.ApiService.ListDimensionValuesExecute(r)
}

/*
 * ListDimensionValues Lists the values for a specific dimension
 * Lists the values for a dimension along with a total count of related views.

Note: This API replaces the list-filter-values API call.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param dIMENSIONID ID of the Dimension
 * @return ApiListDimensionValuesRequest
 */
func (a *DimensionsApiService) ListDimensionValues(ctx _context.Context, dIMENSIONID string) ApiListDimensionValuesRequest {
	return ApiListDimensionValuesRequest{
		ApiService: a,
		ctx: ctx,
		dIMENSIONID: dIMENSIONID,
	}
}

/*
 * Execute executes the request
 * @return ListDimensionValuesResponse
 */
func (a *DimensionsApiService) ListDimensionValuesExecute(r ApiListDimensionValuesRequest) (ListDimensionValuesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListDimensionValuesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DimensionsApiService.ListDimensionValues")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data/v1/dimensions/{DIMENSION_ID}"
	localVarPath = strings.Replace(localVarPath, "{"+"DIMENSION_ID"+"}", _neturl.PathEscape(parameterToString(r.dIMENSIONID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.filters != nil {
		t := *r.filters
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("filters[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("filters[]", parameterToString(t, "multi"))
		}
	}
	if r.timeframe != nil {
		t := *r.timeframe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("timeframe[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("timeframe[]", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDimensionsRequest struct {
	ctx _context.Context
	ApiService *DimensionsApiService
}


func (r ApiListDimensionsRequest) Execute() (ListDimensionsResponse, *_nethttp.Response, error) {
	return r.ApiService.ListDimensionsExecute(r)
}

/*
 * ListDimensions List Dimensions
 * List all available dimensions.

Note: This API replaces the list-filters API call.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListDimensionsRequest
 */
func (a *DimensionsApiService) ListDimensions(ctx _context.Context) ApiListDimensionsRequest {
	return ApiListDimensionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ListDimensionsResponse
 */
func (a *DimensionsApiService) ListDimensionsExecute(r ApiListDimensionsRequest) (ListDimensionsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListDimensionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DimensionsApiService.ListDimensions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data/v1/dimensions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
