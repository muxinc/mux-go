/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
)

// InputSettings An array of objects that each describe an input file to be used to create the asset. As a shortcut, `input` can also be a string URL for a file when only one input file is used. See `input[].url` for requirements.
type InputSettings struct {
	// The web address of the file that Mux should download and use. * For subtitles text tracks, the url is the location of subtitle/captions file. Mux supports [SubRip Text (SRT)](https://en.wikipedia.org/wiki/SubRip) and [Web Video Text Tracks](https://www.w3.org/TR/webvtt1/) format for ingesting Subtitles and Closed Captions. * For Watermarking or Overlay, the url is the location of the watermark image. * When creating clips from existing Mux assets, the url is defined with `mux://assets/{asset_id}` template where `asset_id` is the Asset Identifier for creating the clip from. 
	Url *string `json:"url,omitempty"`
	OverlaySettings *InputSettingsOverlaySettings `json:"overlay_settings,omitempty"`
	// The time offset in seconds from the beginning of the video indicating the clip's starting marker. The default value is 0 when not included. This parameter is only applicable for creating clips when `input.url` has `mux://assets/{asset_id}` format.
	StartTime *float64 `json:"start_time,omitempty"`
	// The time offset in seconds from the beginning of the video, indicating the clip's ending marker. The default value is the duration of the video when not included. This parameter is only applicable for creating clips when `input.url` has `mux://assets/{asset_id}` format.
	EndTime *float64 `json:"end_time,omitempty"`
	// This parameter is required for the `text` track type.
	Type *string `json:"type,omitempty"`
	// Type of text track. This parameter only supports subtitles value. For more information on Subtitles / Closed Captions, [see this blog post](https://mux.com/blog/subtitles-captions-webvtt-hls-and-those-magic-flags/). This parameter is required for `text` track type.
	TextType *string `json:"text_type,omitempty"`
	// The language code value must be a valid [BCP 47](https://tools.ietf.org/html/bcp47) specification compliant value. For example, en for English or en-US for the US version of English. This parameter is required for text type and subtitles text type track.
	LanguageCode *string `json:"language_code,omitempty"`
	// The name of the track containing a human-readable description. This value must be unique across all text type and subtitles `text` type tracks. The hls manifest will associate a subtitle text track with this value. For example, the value should be \"English\" for subtitles text track with language_code as en. This optional parameter should be used only for `text` type and subtitles `text` type track. If this parameter is not included, Mux will auto-populate based on the `input[].language_code` value.
	Name *string `json:"name,omitempty"`
	// Indicates the track provides Subtitles for the Deaf or Hard-of-hearing (SDH). This optional parameter should be used for `text` type and subtitles `text` type tracks.
	ClosedCaptions *bool `json:"closed_captions,omitempty"`
	// This optional parameter should be used for `text` type and subtitles `text` type tracks.
	Passthrough *string `json:"passthrough,omitempty"`
}

// NewInputSettings instantiates a new InputSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputSettings() *InputSettings {
	this := InputSettings{}
	return &this
}

// NewInputSettingsWithDefaults instantiates a new InputSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputSettingsWithDefaults() *InputSettings {
	this := InputSettings{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *InputSettings) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSettings) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *InputSettings) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *InputSettings) SetUrl(v string) {
	o.Url = &v
}

// GetOverlaySettings returns the OverlaySettings field value if set, zero value otherwise.
func (o *InputSettings) GetOverlaySettings() InputSettingsOverlaySettings {
	if o == nil || o.OverlaySettings == nil {
		var ret InputSettingsOverlaySettings
		return ret
	}
	return *o.OverlaySettings
}

// GetOverlaySettingsOk returns a tuple with the OverlaySettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSettings) GetOverlaySettingsOk() (*InputSettingsOverlaySettings, bool) {
	if o == nil || o.OverlaySettings == nil {
		return nil, false
	}
	return o.OverlaySettings, true
}

// HasOverlaySettings returns a boolean if a field has been set.
func (o *InputSettings) HasOverlaySettings() bool {
	if o != nil && o.OverlaySettings != nil {
		return true
	}

	return false
}

// SetOverlaySettings gets a reference to the given InputSettingsOverlaySettings and assigns it to the OverlaySettings field.
func (o *InputSettings) SetOverlaySettings(v InputSettingsOverlaySettings) {
	o.OverlaySettings = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *InputSettings) GetStartTime() float64 {
	if o == nil || o.StartTime == nil {
		var ret float64
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSettings) GetStartTimeOk() (*float64, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *InputSettings) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given float64 and assigns it to the StartTime field.
func (o *InputSettings) SetStartTime(v float64) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *InputSettings) GetEndTime() float64 {
	if o == nil || o.EndTime == nil {
		var ret float64
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSettings) GetEndTimeOk() (*float64, bool) {
	if o == nil || o.EndTime == nil {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *InputSettings) HasEndTime() bool {
	if o != nil && o.EndTime != nil {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given float64 and assigns it to the EndTime field.
func (o *InputSettings) SetEndTime(v float64) {
	o.EndTime = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InputSettings) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSettings) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InputSettings) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *InputSettings) SetType(v string) {
	o.Type = &v
}

// GetTextType returns the TextType field value if set, zero value otherwise.
func (o *InputSettings) GetTextType() string {
	if o == nil || o.TextType == nil {
		var ret string
		return ret
	}
	return *o.TextType
}

// GetTextTypeOk returns a tuple with the TextType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSettings) GetTextTypeOk() (*string, bool) {
	if o == nil || o.TextType == nil {
		return nil, false
	}
	return o.TextType, true
}

// HasTextType returns a boolean if a field has been set.
func (o *InputSettings) HasTextType() bool {
	if o != nil && o.TextType != nil {
		return true
	}

	return false
}

// SetTextType gets a reference to the given string and assigns it to the TextType field.
func (o *InputSettings) SetTextType(v string) {
	o.TextType = &v
}

// GetLanguageCode returns the LanguageCode field value if set, zero value otherwise.
func (o *InputSettings) GetLanguageCode() string {
	if o == nil || o.LanguageCode == nil {
		var ret string
		return ret
	}
	return *o.LanguageCode
}

// GetLanguageCodeOk returns a tuple with the LanguageCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSettings) GetLanguageCodeOk() (*string, bool) {
	if o == nil || o.LanguageCode == nil {
		return nil, false
	}
	return o.LanguageCode, true
}

// HasLanguageCode returns a boolean if a field has been set.
func (o *InputSettings) HasLanguageCode() bool {
	if o != nil && o.LanguageCode != nil {
		return true
	}

	return false
}

// SetLanguageCode gets a reference to the given string and assigns it to the LanguageCode field.
func (o *InputSettings) SetLanguageCode(v string) {
	o.LanguageCode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InputSettings) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSettings) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InputSettings) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InputSettings) SetName(v string) {
	o.Name = &v
}

// GetClosedCaptions returns the ClosedCaptions field value if set, zero value otherwise.
func (o *InputSettings) GetClosedCaptions() bool {
	if o == nil || o.ClosedCaptions == nil {
		var ret bool
		return ret
	}
	return *o.ClosedCaptions
}

// GetClosedCaptionsOk returns a tuple with the ClosedCaptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSettings) GetClosedCaptionsOk() (*bool, bool) {
	if o == nil || o.ClosedCaptions == nil {
		return nil, false
	}
	return o.ClosedCaptions, true
}

// HasClosedCaptions returns a boolean if a field has been set.
func (o *InputSettings) HasClosedCaptions() bool {
	if o != nil && o.ClosedCaptions != nil {
		return true
	}

	return false
}

// SetClosedCaptions gets a reference to the given bool and assigns it to the ClosedCaptions field.
func (o *InputSettings) SetClosedCaptions(v bool) {
	o.ClosedCaptions = &v
}

// GetPassthrough returns the Passthrough field value if set, zero value otherwise.
func (o *InputSettings) GetPassthrough() string {
	if o == nil || o.Passthrough == nil {
		var ret string
		return ret
	}
	return *o.Passthrough
}

// GetPassthroughOk returns a tuple with the Passthrough field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSettings) GetPassthroughOk() (*string, bool) {
	if o == nil || o.Passthrough == nil {
		return nil, false
	}
	return o.Passthrough, true
}

// HasPassthrough returns a boolean if a field has been set.
func (o *InputSettings) HasPassthrough() bool {
	if o != nil && o.Passthrough != nil {
		return true
	}

	return false
}

// SetPassthrough gets a reference to the given string and assigns it to the Passthrough field.
func (o *InputSettings) SetPassthrough(v string) {
	o.Passthrough = &v
}

func (o InputSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.OverlaySettings != nil {
		toSerialize["overlay_settings"] = o.OverlaySettings
	}
	if o.StartTime != nil {
		toSerialize["start_time"] = o.StartTime
	}
	if o.EndTime != nil {
		toSerialize["end_time"] = o.EndTime
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.TextType != nil {
		toSerialize["text_type"] = o.TextType
	}
	if o.LanguageCode != nil {
		toSerialize["language_code"] = o.LanguageCode
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ClosedCaptions != nil {
		toSerialize["closed_captions"] = o.ClosedCaptions
	}
	if o.Passthrough != nil {
		toSerialize["passthrough"] = o.Passthrough
	}
	return json.Marshal(toSerialize)
}

type NullableInputSettings struct {
	value *InputSettings
	isSet bool
}

func (v NullableInputSettings) Get() *InputSettings {
	return v.value
}

func (v *NullableInputSettings) Set(val *InputSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableInputSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableInputSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputSettings(val *InputSettings) *NullableInputSettings {
	return &NullableInputSettings{value: val, isSet: true}
}

func (v NullableInputSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


