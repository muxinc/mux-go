/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
	"time"
)

// AssetRecordingTimes struct for AssetRecordingTimes
type AssetRecordingTimes struct {
	// The time at which the recording for the live stream started. The time value is Unix epoch time represented in ISO 8601 format.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// The duration of the live stream recorded. The time value is in seconds.
	Duration *float64 `json:"duration,omitempty"`
}

// NewAssetRecordingTimes instantiates a new AssetRecordingTimes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetRecordingTimes() *AssetRecordingTimes {
	this := AssetRecordingTimes{}
	return &this
}

// NewAssetRecordingTimesWithDefaults instantiates a new AssetRecordingTimes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetRecordingTimesWithDefaults() *AssetRecordingTimes {
	this := AssetRecordingTimes{}
	return &this
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise.
func (o *AssetRecordingTimes) GetStartedAt() time.Time {
	if o == nil || o.StartedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.StartedAt
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetRecordingTimes) GetStartedAtOk() (*time.Time, bool) {
	if o == nil || o.StartedAt == nil {
		return nil, false
	}
	return o.StartedAt, true
}

// HasStartedAt returns a boolean if a field has been set.
func (o *AssetRecordingTimes) HasStartedAt() bool {
	if o != nil && o.StartedAt != nil {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given time.Time and assigns it to the StartedAt field.
func (o *AssetRecordingTimes) SetStartedAt(v time.Time) {
	o.StartedAt = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *AssetRecordingTimes) GetDuration() float64 {
	if o == nil || o.Duration == nil {
		var ret float64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetRecordingTimes) GetDurationOk() (*float64, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *AssetRecordingTimes) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float64 and assigns it to the Duration field.
func (o *AssetRecordingTimes) SetDuration(v float64) {
	o.Duration = &v
}

func (o AssetRecordingTimes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StartedAt != nil {
		toSerialize["started_at"] = o.StartedAt
	}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	return json.Marshal(toSerialize)
}

type NullableAssetRecordingTimes struct {
	value *AssetRecordingTimes
	isSet bool
}

func (v NullableAssetRecordingTimes) Get() *AssetRecordingTimes {
	return v.value
}

func (v *NullableAssetRecordingTimes) Set(val *AssetRecordingTimes) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetRecordingTimes) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetRecordingTimes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetRecordingTimes(val *AssetRecordingTimes) *NullableAssetRecordingTimes {
	return &NullableAssetRecordingTimes{value: val, isSet: true}
}

func (v NullableAssetRecordingTimes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetRecordingTimes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


