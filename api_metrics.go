/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// MetricsApiService MetricsApi service
type MetricsApiService service

type ApiGetMetricTimeseriesDataRequest struct {
	ctx _context.Context
	ApiService *MetricsApiService
	mETRICID string
	timeframe *[]string
	filters *[]string
	measurement *string
	orderDirection *string
	groupBy *string
}

func (r ApiGetMetricTimeseriesDataRequest) Timeframe(timeframe []string) ApiGetMetricTimeseriesDataRequest {
	r.timeframe = &timeframe
	return r
}
func (r ApiGetMetricTimeseriesDataRequest) Filters(filters []string) ApiGetMetricTimeseriesDataRequest {
	r.filters = &filters
	return r
}
func (r ApiGetMetricTimeseriesDataRequest) Measurement(measurement string) ApiGetMetricTimeseriesDataRequest {
	r.measurement = &measurement
	return r
}
func (r ApiGetMetricTimeseriesDataRequest) OrderDirection(orderDirection string) ApiGetMetricTimeseriesDataRequest {
	r.orderDirection = &orderDirection
	return r
}
func (r ApiGetMetricTimeseriesDataRequest) GroupBy(groupBy string) ApiGetMetricTimeseriesDataRequest {
	r.groupBy = &groupBy
	return r
}

func (r ApiGetMetricTimeseriesDataRequest) Execute() (GetMetricTimeseriesDataResponse, *_nethttp.Response, error) {
	return r.ApiService.GetMetricTimeseriesDataExecute(r)
}

/*
 * GetMetricTimeseriesData Get metric timeseries data
 * Returns timeseries data for a specific metric

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param mETRICID ID of the Metric
 * @return ApiGetMetricTimeseriesDataRequest
 */
func (a *MetricsApiService) GetMetricTimeseriesData(ctx _context.Context, mETRICID string) ApiGetMetricTimeseriesDataRequest {
	return ApiGetMetricTimeseriesDataRequest{
		ApiService: a,
		ctx: ctx,
		mETRICID: mETRICID,
	}
}

/*
 * Execute executes the request
 * @return GetMetricTimeseriesDataResponse
 */
func (a *MetricsApiService) GetMetricTimeseriesDataExecute(r ApiGetMetricTimeseriesDataRequest) (GetMetricTimeseriesDataResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetMetricTimeseriesDataResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsApiService.GetMetricTimeseriesData")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data/v1/metrics/{METRIC_ID}/timeseries"
	localVarPath = strings.Replace(localVarPath, "{"+"METRIC_ID"+"}", _neturl.PathEscape(parameterToString(r.mETRICID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.timeframe != nil {
		t := *r.timeframe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("timeframe[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("timeframe[]", parameterToString(t, "multi"))
		}
	}
	if r.filters != nil {
		t := *r.filters
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("filters[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("filters[]", parameterToString(t, "multi"))
		}
	}
	if r.measurement != nil {
		localVarQueryParams.Add("measurement", parameterToString(*r.measurement, ""))
	}
	if r.orderDirection != nil {
		localVarQueryParams.Add("order_direction", parameterToString(*r.orderDirection, ""))
	}
	if r.groupBy != nil {
		localVarQueryParams.Add("group_by", parameterToString(*r.groupBy, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOverallValuesRequest struct {
	ctx _context.Context
	ApiService *MetricsApiService
	mETRICID string
	timeframe *[]string
	filters *[]string
	measurement *string
}

func (r ApiGetOverallValuesRequest) Timeframe(timeframe []string) ApiGetOverallValuesRequest {
	r.timeframe = &timeframe
	return r
}
func (r ApiGetOverallValuesRequest) Filters(filters []string) ApiGetOverallValuesRequest {
	r.filters = &filters
	return r
}
func (r ApiGetOverallValuesRequest) Measurement(measurement string) ApiGetOverallValuesRequest {
	r.measurement = &measurement
	return r
}

func (r ApiGetOverallValuesRequest) Execute() (GetOverallValuesResponse, *_nethttp.Response, error) {
	return r.ApiService.GetOverallValuesExecute(r)
}

/*
 * GetOverallValues Get Overall values
 * Returns the overall value for a specific metric, as well as the total view count, watch time, and the Mux Global metric value for the metric.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param mETRICID ID of the Metric
 * @return ApiGetOverallValuesRequest
 */
func (a *MetricsApiService) GetOverallValues(ctx _context.Context, mETRICID string) ApiGetOverallValuesRequest {
	return ApiGetOverallValuesRequest{
		ApiService: a,
		ctx: ctx,
		mETRICID: mETRICID,
	}
}

/*
 * Execute executes the request
 * @return GetOverallValuesResponse
 */
func (a *MetricsApiService) GetOverallValuesExecute(r ApiGetOverallValuesRequest) (GetOverallValuesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetOverallValuesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsApiService.GetOverallValues")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data/v1/metrics/{METRIC_ID}/overall"
	localVarPath = strings.Replace(localVarPath, "{"+"METRIC_ID"+"}", _neturl.PathEscape(parameterToString(r.mETRICID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.timeframe != nil {
		t := *r.timeframe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("timeframe[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("timeframe[]", parameterToString(t, "multi"))
		}
	}
	if r.filters != nil {
		t := *r.filters
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("filters[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("filters[]", parameterToString(t, "multi"))
		}
	}
	if r.measurement != nil {
		localVarQueryParams.Add("measurement", parameterToString(*r.measurement, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAllMetricValuesRequest struct {
	ctx _context.Context
	ApiService *MetricsApiService
	timeframe *[]string
	filters *[]string
	dimension *string
	value *string
}

func (r ApiListAllMetricValuesRequest) Timeframe(timeframe []string) ApiListAllMetricValuesRequest {
	r.timeframe = &timeframe
	return r
}
func (r ApiListAllMetricValuesRequest) Filters(filters []string) ApiListAllMetricValuesRequest {
	r.filters = &filters
	return r
}
func (r ApiListAllMetricValuesRequest) Dimension(dimension string) ApiListAllMetricValuesRequest {
	r.dimension = &dimension
	return r
}
func (r ApiListAllMetricValuesRequest) Value(value string) ApiListAllMetricValuesRequest {
	r.value = &value
	return r
}

func (r ApiListAllMetricValuesRequest) Execute() (ListAllMetricValuesResponse, *_nethttp.Response, error) {
	return r.ApiService.ListAllMetricValuesExecute(r)
}

/*
 * ListAllMetricValues List all metric values
 * List all of the values across every breakdown for a specific metric

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiListAllMetricValuesRequest
 */
func (a *MetricsApiService) ListAllMetricValues(ctx _context.Context) ApiListAllMetricValuesRequest {
	return ApiListAllMetricValuesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ListAllMetricValuesResponse
 */
func (a *MetricsApiService) ListAllMetricValuesExecute(r ApiListAllMetricValuesRequest) (ListAllMetricValuesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListAllMetricValuesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsApiService.ListAllMetricValues")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data/v1/metrics/comparison"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.timeframe != nil {
		t := *r.timeframe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("timeframe[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("timeframe[]", parameterToString(t, "multi"))
		}
	}
	if r.filters != nil {
		t := *r.filters
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("filters[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("filters[]", parameterToString(t, "multi"))
		}
	}
	if r.dimension != nil {
		localVarQueryParams.Add("dimension", parameterToString(*r.dimension, ""))
	}
	if r.value != nil {
		localVarQueryParams.Add("value", parameterToString(*r.value, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListBreakdownValuesRequest struct {
	ctx _context.Context
	ApiService *MetricsApiService
	mETRICID string
	groupBy *string
	measurement *string
	filters *[]string
	limit *int32
	page *int32
	orderBy *string
	orderDirection *string
	timeframe *[]string
}

func (r ApiListBreakdownValuesRequest) GroupBy(groupBy string) ApiListBreakdownValuesRequest {
	r.groupBy = &groupBy
	return r
}
func (r ApiListBreakdownValuesRequest) Measurement(measurement string) ApiListBreakdownValuesRequest {
	r.measurement = &measurement
	return r
}
func (r ApiListBreakdownValuesRequest) Filters(filters []string) ApiListBreakdownValuesRequest {
	r.filters = &filters
	return r
}
func (r ApiListBreakdownValuesRequest) Limit(limit int32) ApiListBreakdownValuesRequest {
	r.limit = &limit
	return r
}
func (r ApiListBreakdownValuesRequest) Page(page int32) ApiListBreakdownValuesRequest {
	r.page = &page
	return r
}
func (r ApiListBreakdownValuesRequest) OrderBy(orderBy string) ApiListBreakdownValuesRequest {
	r.orderBy = &orderBy
	return r
}
func (r ApiListBreakdownValuesRequest) OrderDirection(orderDirection string) ApiListBreakdownValuesRequest {
	r.orderDirection = &orderDirection
	return r
}
func (r ApiListBreakdownValuesRequest) Timeframe(timeframe []string) ApiListBreakdownValuesRequest {
	r.timeframe = &timeframe
	return r
}

func (r ApiListBreakdownValuesRequest) Execute() (ListBreakdownValuesResponse, *_nethttp.Response, error) {
	return r.ApiService.ListBreakdownValuesExecute(r)
}

/*
 * ListBreakdownValues List breakdown values
 * List the breakdown values for a specific metric

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param mETRICID ID of the Metric
 * @return ApiListBreakdownValuesRequest
 */
func (a *MetricsApiService) ListBreakdownValues(ctx _context.Context, mETRICID string) ApiListBreakdownValuesRequest {
	return ApiListBreakdownValuesRequest{
		ApiService: a,
		ctx: ctx,
		mETRICID: mETRICID,
	}
}

/*
 * Execute executes the request
 * @return ListBreakdownValuesResponse
 */
func (a *MetricsApiService) ListBreakdownValuesExecute(r ApiListBreakdownValuesRequest) (ListBreakdownValuesResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListBreakdownValuesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsApiService.ListBreakdownValues")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data/v1/metrics/{METRIC_ID}/breakdown"
	localVarPath = strings.Replace(localVarPath, "{"+"METRIC_ID"+"}", _neturl.PathEscape(parameterToString(r.mETRICID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.groupBy != nil {
		localVarQueryParams.Add("group_by", parameterToString(*r.groupBy, ""))
	}
	if r.measurement != nil {
		localVarQueryParams.Add("measurement", parameterToString(*r.measurement, ""))
	}
	if r.filters != nil {
		t := *r.filters
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("filters[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("filters[]", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.orderBy, ""))
	}
	if r.orderDirection != nil {
		localVarQueryParams.Add("order_direction", parameterToString(*r.orderDirection, ""))
	}
	if r.timeframe != nil {
		t := *r.timeframe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("timeframe[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("timeframe[]", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListInsightsRequest struct {
	ctx _context.Context
	ApiService *MetricsApiService
	mETRICID string
	measurement *string
	orderDirection *string
	timeframe *[]string
}

func (r ApiListInsightsRequest) Measurement(measurement string) ApiListInsightsRequest {
	r.measurement = &measurement
	return r
}
func (r ApiListInsightsRequest) OrderDirection(orderDirection string) ApiListInsightsRequest {
	r.orderDirection = &orderDirection
	return r
}
func (r ApiListInsightsRequest) Timeframe(timeframe []string) ApiListInsightsRequest {
	r.timeframe = &timeframe
	return r
}

func (r ApiListInsightsRequest) Execute() (ListInsightsResponse, *_nethttp.Response, error) {
	return r.ApiService.ListInsightsExecute(r)
}

/*
 * ListInsights List Insights
 * Returns a list of insights for a metric. These are the worst performing values across all breakdowns sorted by how much they negatively impact a specific metric.

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param mETRICID ID of the Metric
 * @return ApiListInsightsRequest
 */
func (a *MetricsApiService) ListInsights(ctx _context.Context, mETRICID string) ApiListInsightsRequest {
	return ApiListInsightsRequest{
		ApiService: a,
		ctx: ctx,
		mETRICID: mETRICID,
	}
}

/*
 * Execute executes the request
 * @return ListInsightsResponse
 */
func (a *MetricsApiService) ListInsightsExecute(r ApiListInsightsRequest) (ListInsightsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListInsightsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsApiService.ListInsights")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data/v1/metrics/{METRIC_ID}/insights"
	localVarPath = strings.Replace(localVarPath, "{"+"METRIC_ID"+"}", _neturl.PathEscape(parameterToString(r.mETRICID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.measurement != nil {
		localVarQueryParams.Add("measurement", parameterToString(*r.measurement, ""))
	}
	if r.orderDirection != nil {
		localVarQueryParams.Add("order_direction", parameterToString(*r.orderDirection, ""))
	}
	if r.timeframe != nil {
		t := *r.timeframe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("timeframe[]", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("timeframe[]", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
