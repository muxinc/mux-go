/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
)

// RealTimeHistogramTimeseriesBucketValues struct for RealTimeHistogramTimeseriesBucketValues
type RealTimeHistogramTimeseriesBucketValues struct {
	Percentage *float64 `json:"percentage,omitempty"`
	Count *int64 `json:"count,omitempty"`
}

// NewRealTimeHistogramTimeseriesBucketValues instantiates a new RealTimeHistogramTimeseriesBucketValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealTimeHistogramTimeseriesBucketValues() *RealTimeHistogramTimeseriesBucketValues {
	this := RealTimeHistogramTimeseriesBucketValues{}
	return &this
}

// NewRealTimeHistogramTimeseriesBucketValuesWithDefaults instantiates a new RealTimeHistogramTimeseriesBucketValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealTimeHistogramTimeseriesBucketValuesWithDefaults() *RealTimeHistogramTimeseriesBucketValues {
	this := RealTimeHistogramTimeseriesBucketValues{}
	return &this
}

// GetPercentage returns the Percentage field value if set, zero value otherwise.
func (o *RealTimeHistogramTimeseriesBucketValues) GetPercentage() float64 {
	if o == nil || o.Percentage == nil {
		var ret float64
		return ret
	}
	return *o.Percentage
}

// GetPercentageOk returns a tuple with the Percentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeHistogramTimeseriesBucketValues) GetPercentageOk() (*float64, bool) {
	if o == nil || o.Percentage == nil {
		return nil, false
	}
	return o.Percentage, true
}

// HasPercentage returns a boolean if a field has been set.
func (o *RealTimeHistogramTimeseriesBucketValues) HasPercentage() bool {
	if o != nil && o.Percentage != nil {
		return true
	}

	return false
}

// SetPercentage gets a reference to the given float64 and assigns it to the Percentage field.
func (o *RealTimeHistogramTimeseriesBucketValues) SetPercentage(v float64) {
	o.Percentage = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *RealTimeHistogramTimeseriesBucketValues) GetCount() int64 {
	if o == nil || o.Count == nil {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeHistogramTimeseriesBucketValues) GetCountOk() (*int64, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *RealTimeHistogramTimeseriesBucketValues) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *RealTimeHistogramTimeseriesBucketValues) SetCount(v int64) {
	o.Count = &v
}

func (o RealTimeHistogramTimeseriesBucketValues) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Percentage != nil {
		toSerialize["percentage"] = o.Percentage
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableRealTimeHistogramTimeseriesBucketValues struct {
	value *RealTimeHistogramTimeseriesBucketValues
	isSet bool
}

func (v NullableRealTimeHistogramTimeseriesBucketValues) Get() *RealTimeHistogramTimeseriesBucketValues {
	return v.value
}

func (v *NullableRealTimeHistogramTimeseriesBucketValues) Set(val *RealTimeHistogramTimeseriesBucketValues) {
	v.value = val
	v.isSet = true
}

func (v NullableRealTimeHistogramTimeseriesBucketValues) IsSet() bool {
	return v.isSet
}

func (v *NullableRealTimeHistogramTimeseriesBucketValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealTimeHistogramTimeseriesBucketValues(val *RealTimeHistogramTimeseriesBucketValues) *NullableRealTimeHistogramTimeseriesBucketValues {
	return &NullableRealTimeHistogramTimeseriesBucketValues{value: val, isSet: true}
}

func (v NullableRealTimeHistogramTimeseriesBucketValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealTimeHistogramTimeseriesBucketValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


