/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
)

// SimulcastTarget struct for SimulcastTarget
type SimulcastTarget struct {
	// ID of the Simulcast Target
	Id *string `json:"id,omitempty"`
	// Arbitrary Metadata set when creating a simulcast target.
	Passthrough *string `json:"passthrough,omitempty"`
	// The current status of the simulcast target. See Statuses below for detailed description.   * `idle`: Default status. When the parent live stream is in disconnected status, simulcast targets will be idle state.   * `starting`: The simulcast target transitions into this state when the parent live stream transition into connected state.   * `broadcasting`: The simulcast target has successfully connected to the third party live streaming service and is pushing video to that service.   * `errored`: The simulcast target encountered an error either while attempting to connect to the third party live streaming service, or mid-broadcasting. Compared to other errored statuses in the Mux Video API, a simulcast may transition back into the broadcasting state if a connection with the service can be re-established. 
	Status *string `json:"status,omitempty"`
	// Stream Key represents an stream identifier for the third party live streaming service to simulcast the parent live stream too.
	StreamKey *string `json:"stream_key,omitempty"`
	// RTMP hostname including the application name for the third party live streaming service.
	Url *string `json:"url,omitempty"`
}

// NewSimulcastTarget instantiates a new SimulcastTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimulcastTarget() *SimulcastTarget {
	this := SimulcastTarget{}
	return &this
}

// NewSimulcastTargetWithDefaults instantiates a new SimulcastTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimulcastTargetWithDefaults() *SimulcastTarget {
	this := SimulcastTarget{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SimulcastTarget) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimulcastTarget) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SimulcastTarget) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SimulcastTarget) SetId(v string) {
	o.Id = &v
}

// GetPassthrough returns the Passthrough field value if set, zero value otherwise.
func (o *SimulcastTarget) GetPassthrough() string {
	if o == nil || o.Passthrough == nil {
		var ret string
		return ret
	}
	return *o.Passthrough
}

// GetPassthroughOk returns a tuple with the Passthrough field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimulcastTarget) GetPassthroughOk() (*string, bool) {
	if o == nil || o.Passthrough == nil {
		return nil, false
	}
	return o.Passthrough, true
}

// HasPassthrough returns a boolean if a field has been set.
func (o *SimulcastTarget) HasPassthrough() bool {
	if o != nil && o.Passthrough != nil {
		return true
	}

	return false
}

// SetPassthrough gets a reference to the given string and assigns it to the Passthrough field.
func (o *SimulcastTarget) SetPassthrough(v string) {
	o.Passthrough = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SimulcastTarget) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimulcastTarget) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SimulcastTarget) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SimulcastTarget) SetStatus(v string) {
	o.Status = &v
}

// GetStreamKey returns the StreamKey field value if set, zero value otherwise.
func (o *SimulcastTarget) GetStreamKey() string {
	if o == nil || o.StreamKey == nil {
		var ret string
		return ret
	}
	return *o.StreamKey
}

// GetStreamKeyOk returns a tuple with the StreamKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimulcastTarget) GetStreamKeyOk() (*string, bool) {
	if o == nil || o.StreamKey == nil {
		return nil, false
	}
	return o.StreamKey, true
}

// HasStreamKey returns a boolean if a field has been set.
func (o *SimulcastTarget) HasStreamKey() bool {
	if o != nil && o.StreamKey != nil {
		return true
	}

	return false
}

// SetStreamKey gets a reference to the given string and assigns it to the StreamKey field.
func (o *SimulcastTarget) SetStreamKey(v string) {
	o.StreamKey = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SimulcastTarget) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimulcastTarget) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SimulcastTarget) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SimulcastTarget) SetUrl(v string) {
	o.Url = &v
}

func (o SimulcastTarget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Passthrough != nil {
		toSerialize["passthrough"] = o.Passthrough
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.StreamKey != nil {
		toSerialize["stream_key"] = o.StreamKey
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableSimulcastTarget struct {
	value *SimulcastTarget
	isSet bool
}

func (v NullableSimulcastTarget) Get() *SimulcastTarget {
	return v.value
}

func (v *NullableSimulcastTarget) Set(val *SimulcastTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableSimulcastTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableSimulcastTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimulcastTarget(val *SimulcastTarget) *NullableSimulcastTarget {
	return &NullableSimulcastTarget{value: val, isSet: true}
}

func (v NullableSimulcastTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimulcastTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


