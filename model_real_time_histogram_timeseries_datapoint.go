/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
)

// RealTimeHistogramTimeseriesDatapoint struct for RealTimeHistogramTimeseriesDatapoint
type RealTimeHistogramTimeseriesDatapoint struct {
	Timestamp *string `json:"timestamp,omitempty"`
	Sum *int64 `json:"sum,omitempty"`
	P95 *float64 `json:"p95,omitempty"`
	Median *float64 `json:"median,omitempty"`
	MaxPercentage *float64 `json:"max_percentage,omitempty"`
	BucketValues *[]RealTimeHistogramTimeseriesBucketValues `json:"bucket_values,omitempty"`
	Average *float64 `json:"average,omitempty"`
}

// NewRealTimeHistogramTimeseriesDatapoint instantiates a new RealTimeHistogramTimeseriesDatapoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealTimeHistogramTimeseriesDatapoint() *RealTimeHistogramTimeseriesDatapoint {
	this := RealTimeHistogramTimeseriesDatapoint{}
	return &this
}

// NewRealTimeHistogramTimeseriesDatapointWithDefaults instantiates a new RealTimeHistogramTimeseriesDatapoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealTimeHistogramTimeseriesDatapointWithDefaults() *RealTimeHistogramTimeseriesDatapoint {
	this := RealTimeHistogramTimeseriesDatapoint{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *RealTimeHistogramTimeseriesDatapoint) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeHistogramTimeseriesDatapoint) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *RealTimeHistogramTimeseriesDatapoint) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *RealTimeHistogramTimeseriesDatapoint) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetSum returns the Sum field value if set, zero value otherwise.
func (o *RealTimeHistogramTimeseriesDatapoint) GetSum() int64 {
	if o == nil || o.Sum == nil {
		var ret int64
		return ret
	}
	return *o.Sum
}

// GetSumOk returns a tuple with the Sum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeHistogramTimeseriesDatapoint) GetSumOk() (*int64, bool) {
	if o == nil || o.Sum == nil {
		return nil, false
	}
	return o.Sum, true
}

// HasSum returns a boolean if a field has been set.
func (o *RealTimeHistogramTimeseriesDatapoint) HasSum() bool {
	if o != nil && o.Sum != nil {
		return true
	}

	return false
}

// SetSum gets a reference to the given int64 and assigns it to the Sum field.
func (o *RealTimeHistogramTimeseriesDatapoint) SetSum(v int64) {
	o.Sum = &v
}

// GetP95 returns the P95 field value if set, zero value otherwise.
func (o *RealTimeHistogramTimeseriesDatapoint) GetP95() float64 {
	if o == nil || o.P95 == nil {
		var ret float64
		return ret
	}
	return *o.P95
}

// GetP95Ok returns a tuple with the P95 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeHistogramTimeseriesDatapoint) GetP95Ok() (*float64, bool) {
	if o == nil || o.P95 == nil {
		return nil, false
	}
	return o.P95, true
}

// HasP95 returns a boolean if a field has been set.
func (o *RealTimeHistogramTimeseriesDatapoint) HasP95() bool {
	if o != nil && o.P95 != nil {
		return true
	}

	return false
}

// SetP95 gets a reference to the given float64 and assigns it to the P95 field.
func (o *RealTimeHistogramTimeseriesDatapoint) SetP95(v float64) {
	o.P95 = &v
}

// GetMedian returns the Median field value if set, zero value otherwise.
func (o *RealTimeHistogramTimeseriesDatapoint) GetMedian() float64 {
	if o == nil || o.Median == nil {
		var ret float64
		return ret
	}
	return *o.Median
}

// GetMedianOk returns a tuple with the Median field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeHistogramTimeseriesDatapoint) GetMedianOk() (*float64, bool) {
	if o == nil || o.Median == nil {
		return nil, false
	}
	return o.Median, true
}

// HasMedian returns a boolean if a field has been set.
func (o *RealTimeHistogramTimeseriesDatapoint) HasMedian() bool {
	if o != nil && o.Median != nil {
		return true
	}

	return false
}

// SetMedian gets a reference to the given float64 and assigns it to the Median field.
func (o *RealTimeHistogramTimeseriesDatapoint) SetMedian(v float64) {
	o.Median = &v
}

// GetMaxPercentage returns the MaxPercentage field value if set, zero value otherwise.
func (o *RealTimeHistogramTimeseriesDatapoint) GetMaxPercentage() float64 {
	if o == nil || o.MaxPercentage == nil {
		var ret float64
		return ret
	}
	return *o.MaxPercentage
}

// GetMaxPercentageOk returns a tuple with the MaxPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeHistogramTimeseriesDatapoint) GetMaxPercentageOk() (*float64, bool) {
	if o == nil || o.MaxPercentage == nil {
		return nil, false
	}
	return o.MaxPercentage, true
}

// HasMaxPercentage returns a boolean if a field has been set.
func (o *RealTimeHistogramTimeseriesDatapoint) HasMaxPercentage() bool {
	if o != nil && o.MaxPercentage != nil {
		return true
	}

	return false
}

// SetMaxPercentage gets a reference to the given float64 and assigns it to the MaxPercentage field.
func (o *RealTimeHistogramTimeseriesDatapoint) SetMaxPercentage(v float64) {
	o.MaxPercentage = &v
}

// GetBucketValues returns the BucketValues field value if set, zero value otherwise.
func (o *RealTimeHistogramTimeseriesDatapoint) GetBucketValues() []RealTimeHistogramTimeseriesBucketValues {
	if o == nil || o.BucketValues == nil {
		var ret []RealTimeHistogramTimeseriesBucketValues
		return ret
	}
	return *o.BucketValues
}

// GetBucketValuesOk returns a tuple with the BucketValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeHistogramTimeseriesDatapoint) GetBucketValuesOk() (*[]RealTimeHistogramTimeseriesBucketValues, bool) {
	if o == nil || o.BucketValues == nil {
		return nil, false
	}
	return o.BucketValues, true
}

// HasBucketValues returns a boolean if a field has been set.
func (o *RealTimeHistogramTimeseriesDatapoint) HasBucketValues() bool {
	if o != nil && o.BucketValues != nil {
		return true
	}

	return false
}

// SetBucketValues gets a reference to the given []RealTimeHistogramTimeseriesBucketValues and assigns it to the BucketValues field.
func (o *RealTimeHistogramTimeseriesDatapoint) SetBucketValues(v []RealTimeHistogramTimeseriesBucketValues) {
	o.BucketValues = &v
}

// GetAverage returns the Average field value if set, zero value otherwise.
func (o *RealTimeHistogramTimeseriesDatapoint) GetAverage() float64 {
	if o == nil || o.Average == nil {
		var ret float64
		return ret
	}
	return *o.Average
}

// GetAverageOk returns a tuple with the Average field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeHistogramTimeseriesDatapoint) GetAverageOk() (*float64, bool) {
	if o == nil || o.Average == nil {
		return nil, false
	}
	return o.Average, true
}

// HasAverage returns a boolean if a field has been set.
func (o *RealTimeHistogramTimeseriesDatapoint) HasAverage() bool {
	if o != nil && o.Average != nil {
		return true
	}

	return false
}

// SetAverage gets a reference to the given float64 and assigns it to the Average field.
func (o *RealTimeHistogramTimeseriesDatapoint) SetAverage(v float64) {
	o.Average = &v
}

func (o RealTimeHistogramTimeseriesDatapoint) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Sum != nil {
		toSerialize["sum"] = o.Sum
	}
	if o.P95 != nil {
		toSerialize["p95"] = o.P95
	}
	if o.Median != nil {
		toSerialize["median"] = o.Median
	}
	if o.MaxPercentage != nil {
		toSerialize["max_percentage"] = o.MaxPercentage
	}
	if o.BucketValues != nil {
		toSerialize["bucket_values"] = o.BucketValues
	}
	if o.Average != nil {
		toSerialize["average"] = o.Average
	}
	return json.Marshal(toSerialize)
}

type NullableRealTimeHistogramTimeseriesDatapoint struct {
	value *RealTimeHistogramTimeseriesDatapoint
	isSet bool
}

func (v NullableRealTimeHistogramTimeseriesDatapoint) Get() *RealTimeHistogramTimeseriesDatapoint {
	return v.value
}

func (v *NullableRealTimeHistogramTimeseriesDatapoint) Set(val *RealTimeHistogramTimeseriesDatapoint) {
	v.value = val
	v.isSet = true
}

func (v NullableRealTimeHistogramTimeseriesDatapoint) IsSet() bool {
	return v.isSet
}

func (v *NullableRealTimeHistogramTimeseriesDatapoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealTimeHistogramTimeseriesDatapoint(val *RealTimeHistogramTimeseriesDatapoint) *NullableRealTimeHistogramTimeseriesDatapoint {
	return &NullableRealTimeHistogramTimeseriesDatapoint{value: val, isSet: true}
}

func (v NullableRealTimeHistogramTimeseriesDatapoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealTimeHistogramTimeseriesDatapoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


