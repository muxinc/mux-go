/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
	"fmt"
)

// PlaybackPolicy * `public` playback IDs are accessible by constructing an HLS url like `https://stream.mux.com/${PLAYBACK_ID}`  * `signed` playback IDS should be used with tokens `https://stream.mux.com/${PLAYBACK_ID}?token={TOKEN}`. See [Secure video playback](https://docs.mux.com/guides/video/secure-video-playback) for details about creating tokens. 
type PlaybackPolicy string

// List of PlaybackPolicy
const (
	PUBLIC PlaybackPolicy = "public"
	SIGNED PlaybackPolicy = "signed"
)

func (v *PlaybackPolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlaybackPolicy(value)
	for _, existing := range []PlaybackPolicy{ "public", "signed",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlaybackPolicy", value)
}

// Ptr returns reference to PlaybackPolicy value
func (v PlaybackPolicy) Ptr() *PlaybackPolicy {
	return &v
}

type NullablePlaybackPolicy struct {
	value *PlaybackPolicy
	isSet bool
}

func (v NullablePlaybackPolicy) Get() *PlaybackPolicy {
	return v.value
}

func (v *NullablePlaybackPolicy) Set(val *PlaybackPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaybackPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaybackPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaybackPolicy(val *PlaybackPolicy) *NullablePlaybackPolicy {
	return &NullablePlaybackPolicy{value: val, isSet: true}
}

func (v NullablePlaybackPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaybackPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

