/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
)

// FilterValue struct for FilterValue
type FilterValue struct {
	Value *string `json:"value,omitempty"`
	TotalCount *int64 `json:"total_count,omitempty"`
}

// NewFilterValue instantiates a new FilterValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterValue() *FilterValue {
	this := FilterValue{}
	return &this
}

// NewFilterValueWithDefaults instantiates a new FilterValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterValueWithDefaults() *FilterValue {
	this := FilterValue{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *FilterValue) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterValue) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *FilterValue) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *FilterValue) SetValue(v string) {
	o.Value = &v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *FilterValue) GetTotalCount() int64 {
	if o == nil || o.TotalCount == nil {
		var ret int64
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterValue) GetTotalCountOk() (*int64, bool) {
	if o == nil || o.TotalCount == nil {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *FilterValue) HasTotalCount() bool {
	if o != nil && o.TotalCount != nil {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int64 and assigns it to the TotalCount field.
func (o *FilterValue) SetTotalCount(v int64) {
	o.TotalCount = &v
}

func (o FilterValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.TotalCount != nil {
		toSerialize["total_count"] = o.TotalCount
	}
	return json.Marshal(toSerialize)
}

type NullableFilterValue struct {
	value *FilterValue
	isSet bool
}

func (v NullableFilterValue) Get() *FilterValue {
	return v.value
}

func (v *NullableFilterValue) Set(val *FilterValue) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterValue) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterValue(val *FilterValue) *NullableFilterValue {
	return &NullableFilterValue{value: val, isSet: true}
}

func (v NullableFilterValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


