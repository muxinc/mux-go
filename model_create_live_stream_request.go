/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
)

// CreateLiveStreamRequest struct for CreateLiveStreamRequest
type CreateLiveStreamRequest struct {
	PlaybackPolicy *[]PlaybackPolicy `json:"playback_policy,omitempty"`
	NewAssetSettings *CreateAssetRequest `json:"new_asset_settings,omitempty"`
	// When live streaming software disconnects from Mux, either intentionally or due to a drop in the network, the Reconnect Window is the time in seconds that Mux should wait for the streaming software to reconnect before considering the live stream finished and completing the recorded asset. Defaults to 60 seconds on the API if not specified.
	ReconnectWindow *float32 `json:"reconnect_window,omitempty"`
	Passthrough *string `json:"passthrough,omitempty"`
	// Latency is the time from when the streamer does something in real life to when you see it happen in the player. Set this if you want lower latency for your live stream. Note: Reconnect windows are incompatible with Reduced Latency and will always be set to zero (0) seconds. Read more here: https://mux.com/blog/reduced-latency-for-mux-live-streaming-now-available/
	ReducedLatency *bool `json:"reduced_latency,omitempty"`
	// Marks the live stream as a test live stream when the value is set to true. A test live stream can help evaluate the Mux Video APIs without incurring any cost. There is no limit on number of test live streams created. Test live streams are watermarked with the Mux logo and limited to 5 minutes. The test live stream is disabled after the stream is active for 5 mins and the recorded asset also deleted after 24 hours.
	Test *bool `json:"test,omitempty"`
	SimulcastTargets *[]CreateSimulcastTargetRequest `json:"simulcast_targets,omitempty"`
}

// NewCreateLiveStreamRequest instantiates a new CreateLiveStreamRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateLiveStreamRequest() *CreateLiveStreamRequest {
	this := CreateLiveStreamRequest{}
	return &this
}

// NewCreateLiveStreamRequestWithDefaults instantiates a new CreateLiveStreamRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateLiveStreamRequestWithDefaults() *CreateLiveStreamRequest {
	this := CreateLiveStreamRequest{}
	return &this
}

// GetPlaybackPolicy returns the PlaybackPolicy field value if set, zero value otherwise.
func (o *CreateLiveStreamRequest) GetPlaybackPolicy() []PlaybackPolicy {
	if o == nil || o.PlaybackPolicy == nil {
		var ret []PlaybackPolicy
		return ret
	}
	return *o.PlaybackPolicy
}

// GetPlaybackPolicyOk returns a tuple with the PlaybackPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLiveStreamRequest) GetPlaybackPolicyOk() (*[]PlaybackPolicy, bool) {
	if o == nil || o.PlaybackPolicy == nil {
		return nil, false
	}
	return o.PlaybackPolicy, true
}

// HasPlaybackPolicy returns a boolean if a field has been set.
func (o *CreateLiveStreamRequest) HasPlaybackPolicy() bool {
	if o != nil && o.PlaybackPolicy != nil {
		return true
	}

	return false
}

// SetPlaybackPolicy gets a reference to the given []PlaybackPolicy and assigns it to the PlaybackPolicy field.
func (o *CreateLiveStreamRequest) SetPlaybackPolicy(v []PlaybackPolicy) {
	o.PlaybackPolicy = &v
}

// GetNewAssetSettings returns the NewAssetSettings field value if set, zero value otherwise.
func (o *CreateLiveStreamRequest) GetNewAssetSettings() CreateAssetRequest {
	if o == nil || o.NewAssetSettings == nil {
		var ret CreateAssetRequest
		return ret
	}
	return *o.NewAssetSettings
}

// GetNewAssetSettingsOk returns a tuple with the NewAssetSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLiveStreamRequest) GetNewAssetSettingsOk() (*CreateAssetRequest, bool) {
	if o == nil || o.NewAssetSettings == nil {
		return nil, false
	}
	return o.NewAssetSettings, true
}

// HasNewAssetSettings returns a boolean if a field has been set.
func (o *CreateLiveStreamRequest) HasNewAssetSettings() bool {
	if o != nil && o.NewAssetSettings != nil {
		return true
	}

	return false
}

// SetNewAssetSettings gets a reference to the given CreateAssetRequest and assigns it to the NewAssetSettings field.
func (o *CreateLiveStreamRequest) SetNewAssetSettings(v CreateAssetRequest) {
	o.NewAssetSettings = &v
}

// GetReconnectWindow returns the ReconnectWindow field value if set, zero value otherwise.
func (o *CreateLiveStreamRequest) GetReconnectWindow() float32 {
	if o == nil || o.ReconnectWindow == nil {
		var ret float32
		return ret
	}
	return *o.ReconnectWindow
}

// GetReconnectWindowOk returns a tuple with the ReconnectWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLiveStreamRequest) GetReconnectWindowOk() (*float32, bool) {
	if o == nil || o.ReconnectWindow == nil {
		return nil, false
	}
	return o.ReconnectWindow, true
}

// HasReconnectWindow returns a boolean if a field has been set.
func (o *CreateLiveStreamRequest) HasReconnectWindow() bool {
	if o != nil && o.ReconnectWindow != nil {
		return true
	}

	return false
}

// SetReconnectWindow gets a reference to the given float32 and assigns it to the ReconnectWindow field.
func (o *CreateLiveStreamRequest) SetReconnectWindow(v float32) {
	o.ReconnectWindow = &v
}

// GetPassthrough returns the Passthrough field value if set, zero value otherwise.
func (o *CreateLiveStreamRequest) GetPassthrough() string {
	if o == nil || o.Passthrough == nil {
		var ret string
		return ret
	}
	return *o.Passthrough
}

// GetPassthroughOk returns a tuple with the Passthrough field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLiveStreamRequest) GetPassthroughOk() (*string, bool) {
	if o == nil || o.Passthrough == nil {
		return nil, false
	}
	return o.Passthrough, true
}

// HasPassthrough returns a boolean if a field has been set.
func (o *CreateLiveStreamRequest) HasPassthrough() bool {
	if o != nil && o.Passthrough != nil {
		return true
	}

	return false
}

// SetPassthrough gets a reference to the given string and assigns it to the Passthrough field.
func (o *CreateLiveStreamRequest) SetPassthrough(v string) {
	o.Passthrough = &v
}

// GetReducedLatency returns the ReducedLatency field value if set, zero value otherwise.
func (o *CreateLiveStreamRequest) GetReducedLatency() bool {
	if o == nil || o.ReducedLatency == nil {
		var ret bool
		return ret
	}
	return *o.ReducedLatency
}

// GetReducedLatencyOk returns a tuple with the ReducedLatency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLiveStreamRequest) GetReducedLatencyOk() (*bool, bool) {
	if o == nil || o.ReducedLatency == nil {
		return nil, false
	}
	return o.ReducedLatency, true
}

// HasReducedLatency returns a boolean if a field has been set.
func (o *CreateLiveStreamRequest) HasReducedLatency() bool {
	if o != nil && o.ReducedLatency != nil {
		return true
	}

	return false
}

// SetReducedLatency gets a reference to the given bool and assigns it to the ReducedLatency field.
func (o *CreateLiveStreamRequest) SetReducedLatency(v bool) {
	o.ReducedLatency = &v
}

// GetTest returns the Test field value if set, zero value otherwise.
func (o *CreateLiveStreamRequest) GetTest() bool {
	if o == nil || o.Test == nil {
		var ret bool
		return ret
	}
	return *o.Test
}

// GetTestOk returns a tuple with the Test field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLiveStreamRequest) GetTestOk() (*bool, bool) {
	if o == nil || o.Test == nil {
		return nil, false
	}
	return o.Test, true
}

// HasTest returns a boolean if a field has been set.
func (o *CreateLiveStreamRequest) HasTest() bool {
	if o != nil && o.Test != nil {
		return true
	}

	return false
}

// SetTest gets a reference to the given bool and assigns it to the Test field.
func (o *CreateLiveStreamRequest) SetTest(v bool) {
	o.Test = &v
}

// GetSimulcastTargets returns the SimulcastTargets field value if set, zero value otherwise.
func (o *CreateLiveStreamRequest) GetSimulcastTargets() []CreateSimulcastTargetRequest {
	if o == nil || o.SimulcastTargets == nil {
		var ret []CreateSimulcastTargetRequest
		return ret
	}
	return *o.SimulcastTargets
}

// GetSimulcastTargetsOk returns a tuple with the SimulcastTargets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLiveStreamRequest) GetSimulcastTargetsOk() (*[]CreateSimulcastTargetRequest, bool) {
	if o == nil || o.SimulcastTargets == nil {
		return nil, false
	}
	return o.SimulcastTargets, true
}

// HasSimulcastTargets returns a boolean if a field has been set.
func (o *CreateLiveStreamRequest) HasSimulcastTargets() bool {
	if o != nil && o.SimulcastTargets != nil {
		return true
	}

	return false
}

// SetSimulcastTargets gets a reference to the given []CreateSimulcastTargetRequest and assigns it to the SimulcastTargets field.
func (o *CreateLiveStreamRequest) SetSimulcastTargets(v []CreateSimulcastTargetRequest) {
	o.SimulcastTargets = &v
}

func (o CreateLiveStreamRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PlaybackPolicy != nil {
		toSerialize["playback_policy"] = o.PlaybackPolicy
	}
	if o.NewAssetSettings != nil {
		toSerialize["new_asset_settings"] = o.NewAssetSettings
	}
	if o.ReconnectWindow != nil {
		toSerialize["reconnect_window"] = o.ReconnectWindow
	}
	if o.Passthrough != nil {
		toSerialize["passthrough"] = o.Passthrough
	}
	if o.ReducedLatency != nil {
		toSerialize["reduced_latency"] = o.ReducedLatency
	}
	if o.Test != nil {
		toSerialize["test"] = o.Test
	}
	if o.SimulcastTargets != nil {
		toSerialize["simulcast_targets"] = o.SimulcastTargets
	}
	return json.Marshal(toSerialize)
}

type NullableCreateLiveStreamRequest struct {
	value *CreateLiveStreamRequest
	isSet bool
}

func (v NullableCreateLiveStreamRequest) Get() *CreateLiveStreamRequest {
	return v.value
}

func (v *NullableCreateLiveStreamRequest) Set(val *CreateLiveStreamRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateLiveStreamRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateLiveStreamRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateLiveStreamRequest(val *CreateLiveStreamRequest) *NullableCreateLiveStreamRequest {
	return &NullableCreateLiveStreamRequest{value: val, isSet: true}
}

func (v NullableCreateLiveStreamRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateLiveStreamRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


