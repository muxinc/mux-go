/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
)

// CreateSimulcastTargetRequest struct for CreateSimulcastTargetRequest
type CreateSimulcastTargetRequest struct {
	// Arbitrary metadata set by you when creating a simulcast target.
	Passthrough *string `json:"passthrough,omitempty"`
	// Stream Key represents a stream identifier on the third party live streaming service to send the parent live stream to.
	StreamKey *string `json:"stream_key,omitempty"`
	// RTMP hostname including application name for the third party live streaming service. Example: 'rtmp://live.example.com/app'.
	Url string `json:"url"`
}

// NewCreateSimulcastTargetRequest instantiates a new CreateSimulcastTargetRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSimulcastTargetRequest(url string, ) *CreateSimulcastTargetRequest {
	this := CreateSimulcastTargetRequest{}
	this.Url = url
	return &this
}

// NewCreateSimulcastTargetRequestWithDefaults instantiates a new CreateSimulcastTargetRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSimulcastTargetRequestWithDefaults() *CreateSimulcastTargetRequest {
	this := CreateSimulcastTargetRequest{}
	return &this
}

// GetPassthrough returns the Passthrough field value if set, zero value otherwise.
func (o *CreateSimulcastTargetRequest) GetPassthrough() string {
	if o == nil || o.Passthrough == nil {
		var ret string
		return ret
	}
	return *o.Passthrough
}

// GetPassthroughOk returns a tuple with the Passthrough field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSimulcastTargetRequest) GetPassthroughOk() (*string, bool) {
	if o == nil || o.Passthrough == nil {
		return nil, false
	}
	return o.Passthrough, true
}

// HasPassthrough returns a boolean if a field has been set.
func (o *CreateSimulcastTargetRequest) HasPassthrough() bool {
	if o != nil && o.Passthrough != nil {
		return true
	}

	return false
}

// SetPassthrough gets a reference to the given string and assigns it to the Passthrough field.
func (o *CreateSimulcastTargetRequest) SetPassthrough(v string) {
	o.Passthrough = &v
}

// GetStreamKey returns the StreamKey field value if set, zero value otherwise.
func (o *CreateSimulcastTargetRequest) GetStreamKey() string {
	if o == nil || o.StreamKey == nil {
		var ret string
		return ret
	}
	return *o.StreamKey
}

// GetStreamKeyOk returns a tuple with the StreamKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSimulcastTargetRequest) GetStreamKeyOk() (*string, bool) {
	if o == nil || o.StreamKey == nil {
		return nil, false
	}
	return o.StreamKey, true
}

// HasStreamKey returns a boolean if a field has been set.
func (o *CreateSimulcastTargetRequest) HasStreamKey() bool {
	if o != nil && o.StreamKey != nil {
		return true
	}

	return false
}

// SetStreamKey gets a reference to the given string and assigns it to the StreamKey field.
func (o *CreateSimulcastTargetRequest) SetStreamKey(v string) {
	o.StreamKey = &v
}

// GetUrl returns the Url field value
func (o *CreateSimulcastTargetRequest) GetUrl() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CreateSimulcastTargetRequest) GetUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CreateSimulcastTargetRequest) SetUrl(v string) {
	o.Url = v
}

func (o CreateSimulcastTargetRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Passthrough != nil {
		toSerialize["passthrough"] = o.Passthrough
	}
	if o.StreamKey != nil {
		toSerialize["stream_key"] = o.StreamKey
	}
	if true {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableCreateSimulcastTargetRequest struct {
	value *CreateSimulcastTargetRequest
	isSet bool
}

func (v NullableCreateSimulcastTargetRequest) Get() *CreateSimulcastTargetRequest {
	return v.value
}

func (v *NullableCreateSimulcastTargetRequest) Set(val *CreateSimulcastTargetRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSimulcastTargetRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSimulcastTargetRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSimulcastTargetRequest(val *CreateSimulcastTargetRequest) *NullableCreateSimulcastTargetRequest {
	return &NullableCreateSimulcastTargetRequest{value: val, isSet: true}
}

func (v NullableCreateSimulcastTargetRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSimulcastTargetRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


