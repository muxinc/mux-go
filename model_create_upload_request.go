/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
)

// CreateUploadRequest struct for CreateUploadRequest
type CreateUploadRequest struct {
	// Max time in seconds for the signed upload URL to be valid. If a successful upload has not occurred before the timeout limit, the direct upload is marked `timed_out`
	Timeout *int32 `json:"timeout,omitempty"`
	// If the upload URL will be used in a browser, you must specify the origin in order for the signed URL to have the correct CORS headers.
	CorsOrigin *string `json:"cors_origin,omitempty"`
	NewAssetSettings CreateAssetRequest `json:"new_asset_settings"`
	Test *bool `json:"test,omitempty"`
}

// NewCreateUploadRequest instantiates a new CreateUploadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUploadRequest(newAssetSettings CreateAssetRequest, ) *CreateUploadRequest {
	this := CreateUploadRequest{}
	var timeout int32 = 3600
	this.Timeout = &timeout
	this.NewAssetSettings = newAssetSettings
	return &this
}

// NewCreateUploadRequestWithDefaults instantiates a new CreateUploadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUploadRequestWithDefaults() *CreateUploadRequest {
	this := CreateUploadRequest{}
	var timeout int32 = 3600
	this.Timeout = &timeout
	return &this
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *CreateUploadRequest) GetTimeout() int32 {
	if o == nil || o.Timeout == nil {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUploadRequest) GetTimeoutOk() (*int32, bool) {
	if o == nil || o.Timeout == nil {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *CreateUploadRequest) HasTimeout() bool {
	if o != nil && o.Timeout != nil {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *CreateUploadRequest) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetCorsOrigin returns the CorsOrigin field value if set, zero value otherwise.
func (o *CreateUploadRequest) GetCorsOrigin() string {
	if o == nil || o.CorsOrigin == nil {
		var ret string
		return ret
	}
	return *o.CorsOrigin
}

// GetCorsOriginOk returns a tuple with the CorsOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUploadRequest) GetCorsOriginOk() (*string, bool) {
	if o == nil || o.CorsOrigin == nil {
		return nil, false
	}
	return o.CorsOrigin, true
}

// HasCorsOrigin returns a boolean if a field has been set.
func (o *CreateUploadRequest) HasCorsOrigin() bool {
	if o != nil && o.CorsOrigin != nil {
		return true
	}

	return false
}

// SetCorsOrigin gets a reference to the given string and assigns it to the CorsOrigin field.
func (o *CreateUploadRequest) SetCorsOrigin(v string) {
	o.CorsOrigin = &v
}

// GetNewAssetSettings returns the NewAssetSettings field value
func (o *CreateUploadRequest) GetNewAssetSettings() CreateAssetRequest {
	if o == nil  {
		var ret CreateAssetRequest
		return ret
	}

	return o.NewAssetSettings
}

// GetNewAssetSettingsOk returns a tuple with the NewAssetSettings field value
// and a boolean to check if the value has been set.
func (o *CreateUploadRequest) GetNewAssetSettingsOk() (*CreateAssetRequest, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NewAssetSettings, true
}

// SetNewAssetSettings sets field value
func (o *CreateUploadRequest) SetNewAssetSettings(v CreateAssetRequest) {
	o.NewAssetSettings = v
}

// GetTest returns the Test field value if set, zero value otherwise.
func (o *CreateUploadRequest) GetTest() bool {
	if o == nil || o.Test == nil {
		var ret bool
		return ret
	}
	return *o.Test
}

// GetTestOk returns a tuple with the Test field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUploadRequest) GetTestOk() (*bool, bool) {
	if o == nil || o.Test == nil {
		return nil, false
	}
	return o.Test, true
}

// HasTest returns a boolean if a field has been set.
func (o *CreateUploadRequest) HasTest() bool {
	if o != nil && o.Test != nil {
		return true
	}

	return false
}

// SetTest gets a reference to the given bool and assigns it to the Test field.
func (o *CreateUploadRequest) SetTest(v bool) {
	o.Test = &v
}

func (o CreateUploadRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Timeout != nil {
		toSerialize["timeout"] = o.Timeout
	}
	if o.CorsOrigin != nil {
		toSerialize["cors_origin"] = o.CorsOrigin
	}
	if true {
		toSerialize["new_asset_settings"] = o.NewAssetSettings
	}
	if o.Test != nil {
		toSerialize["test"] = o.Test
	}
	return json.Marshal(toSerialize)
}

type NullableCreateUploadRequest struct {
	value *CreateUploadRequest
	isSet bool
}

func (v NullableCreateUploadRequest) Get() *CreateUploadRequest {
	return v.value
}

func (v *NullableCreateUploadRequest) Set(val *CreateUploadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUploadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUploadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUploadRequest(val *CreateUploadRequest) *NullableCreateUploadRequest {
	return &NullableCreateUploadRequest{value: val, isSet: true}
}

func (v NullableCreateUploadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUploadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


