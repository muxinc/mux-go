/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
)

// Score struct for Score
type Score struct {
	WatchTime *int64 `json:"watch_time,omitempty"`
	ViewCount *int64 `json:"view_count,omitempty"`
	Name *string `json:"name,omitempty"`
	Value *float64 `json:"value,omitempty"`
	Metric *string `json:"metric,omitempty"`
	Items *[]Metric `json:"items,omitempty"`
}

// NewScore instantiates a new Score object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScore() *Score {
	this := Score{}
	return &this
}

// NewScoreWithDefaults instantiates a new Score object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScoreWithDefaults() *Score {
	this := Score{}
	return &this
}

// GetWatchTime returns the WatchTime field value if set, zero value otherwise.
func (o *Score) GetWatchTime() int64 {
	if o == nil || o.WatchTime == nil {
		var ret int64
		return ret
	}
	return *o.WatchTime
}

// GetWatchTimeOk returns a tuple with the WatchTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Score) GetWatchTimeOk() (*int64, bool) {
	if o == nil || o.WatchTime == nil {
		return nil, false
	}
	return o.WatchTime, true
}

// HasWatchTime returns a boolean if a field has been set.
func (o *Score) HasWatchTime() bool {
	if o != nil && o.WatchTime != nil {
		return true
	}

	return false
}

// SetWatchTime gets a reference to the given int64 and assigns it to the WatchTime field.
func (o *Score) SetWatchTime(v int64) {
	o.WatchTime = &v
}

// GetViewCount returns the ViewCount field value if set, zero value otherwise.
func (o *Score) GetViewCount() int64 {
	if o == nil || o.ViewCount == nil {
		var ret int64
		return ret
	}
	return *o.ViewCount
}

// GetViewCountOk returns a tuple with the ViewCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Score) GetViewCountOk() (*int64, bool) {
	if o == nil || o.ViewCount == nil {
		return nil, false
	}
	return o.ViewCount, true
}

// HasViewCount returns a boolean if a field has been set.
func (o *Score) HasViewCount() bool {
	if o != nil && o.ViewCount != nil {
		return true
	}

	return false
}

// SetViewCount gets a reference to the given int64 and assigns it to the ViewCount field.
func (o *Score) SetViewCount(v int64) {
	o.ViewCount = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Score) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Score) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Score) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Score) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Score) GetValue() float64 {
	if o == nil || o.Value == nil {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Score) GetValueOk() (*float64, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Score) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *Score) SetValue(v float64) {
	o.Value = &v
}

// GetMetric returns the Metric field value if set, zero value otherwise.
func (o *Score) GetMetric() string {
	if o == nil || o.Metric == nil {
		var ret string
		return ret
	}
	return *o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Score) GetMetricOk() (*string, bool) {
	if o == nil || o.Metric == nil {
		return nil, false
	}
	return o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *Score) HasMetric() bool {
	if o != nil && o.Metric != nil {
		return true
	}

	return false
}

// SetMetric gets a reference to the given string and assigns it to the Metric field.
func (o *Score) SetMetric(v string) {
	o.Metric = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *Score) GetItems() []Metric {
	if o == nil || o.Items == nil {
		var ret []Metric
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Score) GetItemsOk() (*[]Metric, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *Score) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []Metric and assigns it to the Items field.
func (o *Score) SetItems(v []Metric) {
	o.Items = &v
}

func (o Score) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.WatchTime != nil {
		toSerialize["watch_time"] = o.WatchTime
	}
	if o.ViewCount != nil {
		toSerialize["view_count"] = o.ViewCount
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Metric != nil {
		toSerialize["metric"] = o.Metric
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableScore struct {
	value *Score
	isSet bool
}

func (v NullableScore) Get() *Score {
	return v.value
}

func (v *NullableScore) Set(val *Score) {
	v.value = val
	v.isSet = true
}

func (v NullableScore) IsSet() bool {
	return v.isSet
}

func (v *NullableScore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScore(val *Score) *NullableScore {
	return &NullableScore{value: val, isSet: true}
}

func (v NullableScore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


