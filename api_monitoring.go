// Mux Go - Copyright 2019 Mux Inc.
// NOTE: This file is auto generated. Do not edit this file manually.

package muxgo

import (
	"fmt"
	"io/ioutil"
	"net/url"
	"strings"
)

type MonitoringApiService service

type GetMonitoringBreakdownParams struct {
	Dimension      string
	Timestamp      int32
	Filters        []string
	OrderBy        string
	OrderDirection string
}

// GetMonitoringBreakdown optionally accepts the APIOption of WithParams(*GetMonitoringBreakdownParams).
func (a *MonitoringApiService) GetMonitoringBreakdown(mONITORINGMETRICID string, opts ...APIOption) (GetMonitoringBreakdownResponse, error) {
	var (
		localVarAPIOptions   = new(APIOptions)
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetMonitoringBreakdownResponse
	)

	for _, opt := range opts {
		opt(localVarAPIOptions)
	}

	localVarOptionals, ok := localVarAPIOptions.params.(*GetMonitoringBreakdownParams)
	if localVarAPIOptions.params != nil && !ok {
		return localVarReturnValue, reportError("provided params were not of type *GetMonitoringBreakdownParams")
	}

	// create path and map variables
	localVarPath := a.client.cfg.basePath + "/data/v1/monitoring/metrics/{MONITORING_METRIC_ID}/breakdown"
	localVarPath = strings.Replace(localVarPath, "{"+"MONITORING_METRIC_ID"+"}", fmt.Sprintf("%v", mONITORINGMETRICID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && isSet(localVarOptionals.Dimension) {
		localVarQueryParams.Add("dimension", parameterToString(localVarOptionals.Dimension, ""))
	}
	if localVarOptionals != nil && isSet(localVarOptionals.Timestamp) {
		localVarQueryParams.Add("timestamp", parameterToString(localVarOptionals.Timestamp, ""))
	}
	if localVarOptionals != nil && isSet(localVarOptionals.Filters) {
		// This will "always work" for Mux's use case, since we always treat collections in query params as "multi" types.
		// The first version of this code checked the collectionFormat, but that's just wasted CPU cycles right now.
		for _, v := range localVarOptionals.Filters {
			localVarQueryParams.Add("filters[]", v)
		}
	}
	if localVarOptionals != nil && isSet(localVarOptionals.OrderBy) {
		localVarQueryParams.Add("order_by", parameterToString(localVarOptionals.OrderBy, ""))
	}
	if localVarOptionals != nil && isSet(localVarOptionals.OrderDirection) {
		localVarQueryParams.Add("order_direction", parameterToString(localVarOptionals.OrderDirection, ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}

	r, err := a.client.prepareRequest(localVarAPIOptions, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, err
	}

	// Check for common HTTP error status codes
	err = CheckForHttpError(localVarHttpResponse.StatusCode, localVarBody)
	if err != nil {
		return localVarReturnValue, err
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, newErr
	}

	return localVarReturnValue, nil
}

type GetMonitoringBreakdownTimeseriesParams struct {
	Dimension      string
	Timeframe      []string
	Filters        []string
	Limit          int32
	OrderBy        string
	OrderDirection string
}

// GetMonitoringBreakdownTimeseries optionally accepts the APIOption of WithParams(*GetMonitoringBreakdownTimeseriesParams).
func (a *MonitoringApiService) GetMonitoringBreakdownTimeseries(mONITORINGMETRICID string, opts ...APIOption) (GetMonitoringBreakdownTimeseriesResponse, error) {
	var (
		localVarAPIOptions   = new(APIOptions)
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetMonitoringBreakdownTimeseriesResponse
	)

	for _, opt := range opts {
		opt(localVarAPIOptions)
	}

	localVarOptionals, ok := localVarAPIOptions.params.(*GetMonitoringBreakdownTimeseriesParams)
	if localVarAPIOptions.params != nil && !ok {
		return localVarReturnValue, reportError("provided params were not of type *GetMonitoringBreakdownTimeseriesParams")
	}

	// create path and map variables
	localVarPath := a.client.cfg.basePath + "/data/v1/monitoring/metrics/{MONITORING_METRIC_ID}/breakdown-timeseries"
	localVarPath = strings.Replace(localVarPath, "{"+"MONITORING_METRIC_ID"+"}", fmt.Sprintf("%v", mONITORINGMETRICID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && isSet(localVarOptionals.Dimension) {
		localVarQueryParams.Add("dimension", parameterToString(localVarOptionals.Dimension, ""))
	}
	if localVarOptionals != nil && isSet(localVarOptionals.Timeframe) {
		// This will "always work" for Mux's use case, since we always treat collections in query params as "multi" types.
		// The first version of this code checked the collectionFormat, but that's just wasted CPU cycles right now.
		for _, v := range localVarOptionals.Timeframe {
			localVarQueryParams.Add("timeframe[]", v)
		}
	}
	if localVarOptionals != nil && isSet(localVarOptionals.Filters) {
		// This will "always work" for Mux's use case, since we always treat collections in query params as "multi" types.
		// The first version of this code checked the collectionFormat, but that's just wasted CPU cycles right now.
		for _, v := range localVarOptionals.Filters {
			localVarQueryParams.Add("filters[]", v)
		}
	}
	if localVarOptionals != nil && isSet(localVarOptionals.Limit) {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit, ""))
	}
	if localVarOptionals != nil && isSet(localVarOptionals.OrderBy) {
		localVarQueryParams.Add("order_by", parameterToString(localVarOptionals.OrderBy, ""))
	}
	if localVarOptionals != nil && isSet(localVarOptionals.OrderDirection) {
		localVarQueryParams.Add("order_direction", parameterToString(localVarOptionals.OrderDirection, ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}

	r, err := a.client.prepareRequest(localVarAPIOptions, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, err
	}

	// Check for common HTTP error status codes
	err = CheckForHttpError(localVarHttpResponse.StatusCode, localVarBody)
	if err != nil {
		return localVarReturnValue, err
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, newErr
	}

	return localVarReturnValue, nil
}

type GetMonitoringHistogramTimeseriesParams struct {
	Filters []string
}

// GetMonitoringHistogramTimeseries optionally accepts the APIOption of WithParams(*GetMonitoringHistogramTimeseriesParams).
func (a *MonitoringApiService) GetMonitoringHistogramTimeseries(mONITORINGHISTOGRAMMETRICID string, opts ...APIOption) (GetMonitoringHistogramTimeseriesResponse, error) {
	var (
		localVarAPIOptions   = new(APIOptions)
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetMonitoringHistogramTimeseriesResponse
	)

	for _, opt := range opts {
		opt(localVarAPIOptions)
	}

	localVarOptionals, ok := localVarAPIOptions.params.(*GetMonitoringHistogramTimeseriesParams)
	if localVarAPIOptions.params != nil && !ok {
		return localVarReturnValue, reportError("provided params were not of type *GetMonitoringHistogramTimeseriesParams")
	}

	// create path and map variables
	localVarPath := a.client.cfg.basePath + "/data/v1/monitoring/metrics/{MONITORING_HISTOGRAM_METRIC_ID}/histogram-timeseries"
	localVarPath = strings.Replace(localVarPath, "{"+"MONITORING_HISTOGRAM_METRIC_ID"+"}", fmt.Sprintf("%v", mONITORINGHISTOGRAMMETRICID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && isSet(localVarOptionals.Filters) {
		// This will "always work" for Mux's use case, since we always treat collections in query params as "multi" types.
		// The first version of this code checked the collectionFormat, but that's just wasted CPU cycles right now.
		for _, v := range localVarOptionals.Filters {
			localVarQueryParams.Add("filters[]", v)
		}
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}

	r, err := a.client.prepareRequest(localVarAPIOptions, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, err
	}

	// Check for common HTTP error status codes
	err = CheckForHttpError(localVarHttpResponse.StatusCode, localVarBody)
	if err != nil {
		return localVarReturnValue, err
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, newErr
	}

	return localVarReturnValue, nil
}

type GetMonitoringTimeseriesParams struct {
	Filters   []string
	Timestamp int32
}

// GetMonitoringTimeseries optionally accepts the APIOption of WithParams(*GetMonitoringTimeseriesParams).
func (a *MonitoringApiService) GetMonitoringTimeseries(mONITORINGMETRICID string, opts ...APIOption) (GetMonitoringTimeseriesResponse, error) {
	var (
		localVarAPIOptions   = new(APIOptions)
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetMonitoringTimeseriesResponse
	)

	for _, opt := range opts {
		opt(localVarAPIOptions)
	}

	localVarOptionals, ok := localVarAPIOptions.params.(*GetMonitoringTimeseriesParams)
	if localVarAPIOptions.params != nil && !ok {
		return localVarReturnValue, reportError("provided params were not of type *GetMonitoringTimeseriesParams")
	}

	// create path and map variables
	localVarPath := a.client.cfg.basePath + "/data/v1/monitoring/metrics/{MONITORING_METRIC_ID}/timeseries"
	localVarPath = strings.Replace(localVarPath, "{"+"MONITORING_METRIC_ID"+"}", fmt.Sprintf("%v", mONITORINGMETRICID), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && isSet(localVarOptionals.Filters) {
		// This will "always work" for Mux's use case, since we always treat collections in query params as "multi" types.
		// The first version of this code checked the collectionFormat, but that's just wasted CPU cycles right now.
		for _, v := range localVarOptionals.Filters {
			localVarQueryParams.Add("filters[]", v)
		}
	}
	if localVarOptionals != nil && isSet(localVarOptionals.Timestamp) {
		localVarQueryParams.Add("timestamp", parameterToString(localVarOptionals.Timestamp, ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}

	r, err := a.client.prepareRequest(localVarAPIOptions, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, err
	}

	// Check for common HTTP error status codes
	err = CheckForHttpError(localVarHttpResponse.StatusCode, localVarBody)
	if err != nil {
		return localVarReturnValue, err
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, newErr
	}

	return localVarReturnValue, nil
}

func (a *MonitoringApiService) ListMonitoringDimensions(opts ...APIOption) (ListMonitoringDimensionsResponse, error) {
	var (
		localVarAPIOptions   = new(APIOptions)
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListMonitoringDimensionsResponse
	)

	for _, opt := range opts {
		opt(localVarAPIOptions)
	}

	// create path and map variables
	localVarPath := a.client.cfg.basePath + "/data/v1/monitoring/dimensions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}

	r, err := a.client.prepareRequest(localVarAPIOptions, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, err
	}

	// Check for common HTTP error status codes
	err = CheckForHttpError(localVarHttpResponse.StatusCode, localVarBody)
	if err != nil {
		return localVarReturnValue, err
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, newErr
	}

	return localVarReturnValue, nil
}

func (a *MonitoringApiService) ListMonitoringMetrics(opts ...APIOption) (ListMonitoringMetricsResponse, error) {
	var (
		localVarAPIOptions   = new(APIOptions)
		localVarHttpMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListMonitoringMetricsResponse
	)

	for _, opt := range opts {
		opt(localVarAPIOptions)
	}

	// create path and map variables
	localVarPath := a.client.cfg.basePath + "/data/v1/monitoring/metrics"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}

	r, err := a.client.prepareRequest(localVarAPIOptions, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, err
	}

	// Check for common HTTP error status codes
	err = CheckForHttpError(localVarHttpResponse.StatusCode, localVarBody)
	if err != nil {
		return localVarReturnValue, err
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, newErr
	}

	return localVarReturnValue, nil
}
