/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
)

// RealTimeTimeseriesDatapoint struct for RealTimeTimeseriesDatapoint
type RealTimeTimeseriesDatapoint struct {
	Value *float64 `json:"value,omitempty"`
	Date *string `json:"date,omitempty"`
	ConcurentViewers *int64 `json:"concurent_viewers,omitempty"`
}

// NewRealTimeTimeseriesDatapoint instantiates a new RealTimeTimeseriesDatapoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealTimeTimeseriesDatapoint() *RealTimeTimeseriesDatapoint {
	this := RealTimeTimeseriesDatapoint{}
	return &this
}

// NewRealTimeTimeseriesDatapointWithDefaults instantiates a new RealTimeTimeseriesDatapoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealTimeTimeseriesDatapointWithDefaults() *RealTimeTimeseriesDatapoint {
	this := RealTimeTimeseriesDatapoint{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *RealTimeTimeseriesDatapoint) GetValue() float64 {
	if o == nil || o.Value == nil {
		var ret float64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeTimeseriesDatapoint) GetValueOk() (*float64, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *RealTimeTimeseriesDatapoint) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given float64 and assigns it to the Value field.
func (o *RealTimeTimeseriesDatapoint) SetValue(v float64) {
	o.Value = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *RealTimeTimeseriesDatapoint) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeTimeseriesDatapoint) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *RealTimeTimeseriesDatapoint) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *RealTimeTimeseriesDatapoint) SetDate(v string) {
	o.Date = &v
}

// GetConcurentViewers returns the ConcurentViewers field value if set, zero value otherwise.
func (o *RealTimeTimeseriesDatapoint) GetConcurentViewers() int64 {
	if o == nil || o.ConcurentViewers == nil {
		var ret int64
		return ret
	}
	return *o.ConcurentViewers
}

// GetConcurentViewersOk returns a tuple with the ConcurentViewers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealTimeTimeseriesDatapoint) GetConcurentViewersOk() (*int64, bool) {
	if o == nil || o.ConcurentViewers == nil {
		return nil, false
	}
	return o.ConcurentViewers, true
}

// HasConcurentViewers returns a boolean if a field has been set.
func (o *RealTimeTimeseriesDatapoint) HasConcurentViewers() bool {
	if o != nil && o.ConcurentViewers != nil {
		return true
	}

	return false
}

// SetConcurentViewers gets a reference to the given int64 and assigns it to the ConcurentViewers field.
func (o *RealTimeTimeseriesDatapoint) SetConcurentViewers(v int64) {
	o.ConcurentViewers = &v
}

func (o RealTimeTimeseriesDatapoint) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.ConcurentViewers != nil {
		toSerialize["concurent_viewers"] = o.ConcurentViewers
	}
	return json.Marshal(toSerialize)
}

type NullableRealTimeTimeseriesDatapoint struct {
	value *RealTimeTimeseriesDatapoint
	isSet bool
}

func (v NullableRealTimeTimeseriesDatapoint) Get() *RealTimeTimeseriesDatapoint {
	return v.value
}

func (v *NullableRealTimeTimeseriesDatapoint) Set(val *RealTimeTimeseriesDatapoint) {
	v.value = val
	v.isSet = true
}

func (v NullableRealTimeTimeseriesDatapoint) IsSet() bool {
	return v.isSet
}

func (v *NullableRealTimeTimeseriesDatapoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealTimeTimeseriesDatapoint(val *RealTimeTimeseriesDatapoint) *NullableRealTimeTimeseriesDatapoint {
	return &NullableRealTimeTimeseriesDatapoint{value: val, isSet: true}
}

func (v NullableRealTimeTimeseriesDatapoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealTimeTimeseriesDatapoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


