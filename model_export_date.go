/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * API version: v1
 * Contact: devex@mux.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package muxgo

import (
	"encoding/json"
)

// ExportDate struct for ExportDate
type ExportDate struct {
	ExportDate *string `json:"export_date,omitempty"`
	Files *[]ExportFile `json:"files,omitempty"`
}

// NewExportDate instantiates a new ExportDate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportDate() *ExportDate {
	this := ExportDate{}
	return &this
}

// NewExportDateWithDefaults instantiates a new ExportDate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportDateWithDefaults() *ExportDate {
	this := ExportDate{}
	return &this
}

// GetExportDate returns the ExportDate field value if set, zero value otherwise.
func (o *ExportDate) GetExportDate() string {
	if o == nil || o.ExportDate == nil {
		var ret string
		return ret
	}
	return *o.ExportDate
}

// GetExportDateOk returns a tuple with the ExportDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDate) GetExportDateOk() (*string, bool) {
	if o == nil || o.ExportDate == nil {
		return nil, false
	}
	return o.ExportDate, true
}

// HasExportDate returns a boolean if a field has been set.
func (o *ExportDate) HasExportDate() bool {
	if o != nil && o.ExportDate != nil {
		return true
	}

	return false
}

// SetExportDate gets a reference to the given string and assigns it to the ExportDate field.
func (o *ExportDate) SetExportDate(v string) {
	o.ExportDate = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *ExportDate) GetFiles() []ExportFile {
	if o == nil || o.Files == nil {
		var ret []ExportFile
		return ret
	}
	return *o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportDate) GetFilesOk() (*[]ExportFile, bool) {
	if o == nil || o.Files == nil {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *ExportDate) HasFiles() bool {
	if o != nil && o.Files != nil {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []ExportFile and assigns it to the Files field.
func (o *ExportDate) SetFiles(v []ExportFile) {
	o.Files = &v
}

func (o ExportDate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExportDate != nil {
		toSerialize["export_date"] = o.ExportDate
	}
	if o.Files != nil {
		toSerialize["files"] = o.Files
	}
	return json.Marshal(toSerialize)
}

type NullableExportDate struct {
	value *ExportDate
	isSet bool
}

func (v NullableExportDate) Get() *ExportDate {
	return v.value
}

func (v *NullableExportDate) Set(val *ExportDate) {
	v.value = val
	v.isSet = true
}

func (v NullableExportDate) IsSet() bool {
	return v.isSet
}

func (v *NullableExportDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportDate(val *ExportDate) *NullableExportDate {
	return &NullableExportDate{value: val, isSet: true}
}

func (v NullableExportDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


